# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'WTP.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import qtawesome
import json
import multiprocessing
import os
import sys
import threading
import time
import xlsxwriter
import requests
from PyQt5 import sip, QtCore, QtWidgets, QtGui
from PyQt5.QtChart import QChart, QSplineSeries, QChartView, QValueAxis
from PyQt5.QtGui import QIcon, QFont, QPixmap, QDoubleValidator, QIntValidator, QRegExpValidator, QStandardItemModel, \
    QStandardItem, QBrush, QPainter, QBitmap, QColor, QPen
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QMainWindow, QLabel, \
    QGridLayout, QLineEdit, QHBoxLayout, QMessageBox, QVBoxLayout, QFormLayout, QDesktopWidget, QStatusBar, QTableView, \
    QComboBox, QFrame, QGroupBox, QRadioButton, QHeaderView, QAbstractItemView
from PyQt5.QtCore import Qt, QRegExp, QRect, QPointF
from openpyxl import Workbook

ServerAddress = 'http://127.0.0.1:8000'


class WTP(QMainWindow):
    def __init__(self):
        super().__init__()
        # flag_train false是开始训练 true是取消训练
        self.flag_train = False
        self.Windows()

    # 主窗体
    def Windows(self):
        # QWidget部件是pyqt5所有用户界面对象的基类，为QWidget提供默认构造函数。
        # resize()方法调整窗口的大小
        self.resize(800, 600)
        self.setFixedSize(800, 600)
        # 设置窗口的标题及图标
        self.setWindowTitle('智能动态行程规划系统')
        self.setWindowIcon(QIcon('Background/bit_title_icon.jpg'))

        # 初始化布局
        self.layout()

        # 初始化按钮
        self.addButton_status0()

        # 左下角bit标志
        self.l1 = QLabel()
        png = QPixmap('Background/BIT_IconWhite.png')
        width = png.width()
        height = png.height()
        png = png.scaled(width / 15, height / 15, Qt.KeepAspectRatio, Qt.SmoothTransformation)
        self.l1.setPixmap(png)
        self.left_down_layout.addWidget(self.l1)

        # 初始状态下右上角背景图片
        self.setStyleSheet("#right_widget{border-image:url(Background/background.png);}")

        # 状态栏
        self.groupBox = QGroupBox()
        self.statusBarLayout = QGridLayout()
        self.groupBox.setLayout(self.statusBarLayout)
        self.statusBar = QStatusBar()
        self.setStatusBar(self.statusBar)
        self.statusBar.setObjectName('statusBar')
        self.statusBarLayout.addWidget(self.statusBar)
        self.right_down_layout.addWidget(self.groupBox)
        self.statusBar.setFont(QFont("SimHei", 15))

        # 隐藏初始导航栏
        # self.setWindowOpacity(0.9)  # 设置窗口透明度
        self.setAttribute(QtCore.Qt.WA_TranslucentBackground)  # 设置窗口背景透明
        self.setWindowFlag(QtCore.Qt.FramelessWindowHint)  # 隐藏边框

        # 居中
        center(self)
        # 显示在屏幕上
        self.show()
        print(self.left_widget.width(), self.left_widget.height())
        print(self.right_widget.width(), self.right_widget.height())
        self.left_widget.setFixedSize(self.left_widget.width(), self.left_widget.height())
        self.right_widget.setFixedSize(self.right_widget.width(), self.right_widget.height())

    # 初始化布局
    def layout(self):
        # 创建窗口主部件
        self.main_widget = QWidget()
        # 创建主部件的网格布局
        self.main_layout = QGridLayout()
        # 设置窗口主部件布局为网格布局
        self.main_widget.setLayout(self.main_layout)

        # 创建左侧部件
        self.left_widget = QWidget()
        self.left_widget.setObjectName('left_widget')
        # 创建左侧部件的网格布局层
        self.left_layout = QGridLayout()
        # 设置左侧部件布局为网格
        self.left_widget.setLayout(self.left_layout)

        # 创建左侧部件的上半部件
        self.left_up_widget = QWidget()
        self.left_up_widget.setObjectName('left_up_widget')
        # 创建左上侧部件的网格布局层
        self.left_up_layout = QGridLayout()
        # 设置左上侧部件布局为网格
        self.left_up_widget.setLayout(self.left_up_layout)

        # 创建左侧部件的下半部件
        self.left_down_widget = QWidget()
        self.left_down_widget.setObjectName('left_down_widget')
        # 创建左下侧部件的网格布局层
        self.left_down_layout = QGridLayout()
        # 设置左下侧部件布局为网格
        self.left_down_widget.setLayout(self.left_down_layout)

        # 创建右侧部件
        self.right_widget = QWidget()
        self.right_widget.setObjectName('right_widget')
        # 创建右侧部件的网格布局层
        self.right_layout = QGridLayout()
        # 设置右侧部件布局为网格
        self.right_widget.setLayout(self.right_layout)

        # 右侧上半部分部件
        self.right_up_widget = QWidget()
        self.right_up_widget.setObjectName('right_up_widget')
        # 创建右侧上半部件的网格布局层
        self.right_up_layout = QGridLayout()
        # 设置右侧部件布局为网格
        self.right_up_widget.setLayout(self.right_up_layout)

        # 右侧下半部分部件
        self.right_down_widget = QWidget()
        self.right_down_widget.setObjectName('right_down_widget')
        # 创建右侧下半部件的网格布局层
        self.right_down_layout = QGridLayout()
        # 设置右侧部件布局为网格
        self.right_down_widget.setLayout(self.right_down_layout)

        self.right_layout.addWidget(self.right_up_widget, 0, 0, 10, 1)
        self.right_layout.addWidget(self.right_down_widget, 10, 0, 1, 1)

        # 设置子部件在父布局中的位置
        self.left_layout.addWidget(self.left_up_widget, 0, 0, 100, 1)
        self.left_layout.addWidget(self.left_down_widget, 100, 0, 1, 1)
        self.main_layout.addWidget(self.left_widget, 0, 0, 6, 2)
        self.main_layout.addWidget(self.right_widget, 0, 2, 6, 10)
        # 设置窗口主部件
        self.setCentralWidget(self.main_widget)

        # 设置左侧布局qss
        self.left_widget.setStyleSheet('''
            QPushButton{border:none;color:white;text-align: left; }
            QPushButton#left_button:hover{border-left:4px solid red;font-weight:400;}
            QWidget#left_widget{
                background:gray;
                border-top:1px solid white;
                border-bottom:1px solid white;
                border-left:1px solid white;
                border-top-left-radius:10px;
                border-bottom-left-radius:10px;
            }
        ''')

        # 设置右侧布局qss
        self.right_widget.setStyleSheet('''
            QWidget#right_widget{
                color:#232C51;
                background:white;
                border-top:1px solid black;
                border-bottom:1px solid black;
                border-right:1px solid black;
                border-top-right-radius:10px;
                border-bottom-right-radius:10px;
            }
        ''')

        # 设置右下侧布局qss
        self.right_down_widget.setStyleSheet('''
            QGroupBox{
                border:2px solid black;
                border-radius:15px;
            }
        ''')

        self.main_layout.setSpacing(0)

    # 添加初始界面（状态0）下按钮
    def addButton_status0(self):

        # 初始状态下右上角背景图片
        self.setStyleSheet("#right_widget{border-image:url(Background/background.png);}")

        '''
            左上按钮布局
        '''
        # 清洗右侧页面
        if self.findChild(QFrame, 'right_help_status3'):
            self.frame_help3.setVisible(False)
        # 清洗右侧页面
        if self.findChild(QFrame, 'right_help_status2'):
            self.frame_help2.setVisible(False)
        # 清洗右侧页面
        if self.findChild(QFrame, 'right_dataProcess'):
            self.frame_dataProcess.setVisible(False)
        # 清洗右侧页面
        if self.findChild(QFrame, 'right_test'):
            self.frame_test.setVisible(False)
        # 清洗右侧页面
        if self.findChild(QFrame, 'right_help_status1'):
            self.frame_help1.setVisible(False)
        # 清洗左侧页面
        while (self.findChild(QPushButton, 'left_button')):
            self.left_layout.removeWidget(self.findChild(QPushButton, 'left_button'))
            sip.delete(self.findChild(QPushButton, 'left_button'))

        # 数据预处理按钮
        self.btn_dataProcess = QPushButton('数据预处理', self)
        self.btn_dataProcess.setIcon(QIcon('Icon/Process/process_white.png'))
        self.btn_dataProcess.setToolTip("点击开始数据预处理")
        self.btn_dataProcess.setObjectName('left_button')
        self.btn_dataProcess.clicked.connect(self.addButton_status1)
        self.left_up_layout.addWidget(self.btn_dataProcess, 0, 0, 1, 1)
        self.btn_dataProcess.setMaximumSize(160, 30)
        self.btn_dataProcess.setFont(QFont("SimHei", 13))

        # 模型训练按钮
        self.btn_train = QPushButton('模型训练', self)
        self.btn_train.setIcon(QIcon('Icon/Train/train_white.png'))
        self.btn_train.setObjectName('left_button')
        self.btn_train.clicked.connect(self.addButton_status2)
        self.left_up_layout.addWidget(self.btn_train, 1, 0, 1, 1)
        self.btn_train.setMaximumSize(160, 30)
        self.btn_train.setFont(QFont("SimHei", 13))

        # 模型测试按钮
        self.btn_test = QPushButton('模型测试', self)
        self.btn_test.setIcon(QIcon('Icon/Test/test_white.png'))
        self.btn_test.setObjectName('left_button')
        self.btn_test.setToolTip("点击开始模型测试")
        self.btn_test.clicked.connect(self.addButton_status3)
        self.btn_test.setMaximumSize(160, 30)
        self.btn_test.setFont(QFont("SimHei", 13))
        self.left_up_layout.addWidget(self.btn_test, 2, 0, 1, 1)

        # 帮助按钮
        self.btn_help = QPushButton('帮助', self)
        self.btn_help.setIcon(QIcon('Icon/Help/help_white.png'))
        self.btn_help.setObjectName('left_button')
        self.btn_help.setToolTip("点击显示帮助")
        self.btn_help.clicked.connect(self.help_status0)
        self.left_up_layout.addWidget(self.btn_help, 3, 0, 1, 1)
        self.btn_help.setMaximumSize(160, 30)
        self.btn_help.setFont(QFont("SimHei", 13))

        # 退出系统按钮
        self.btn_quit = QPushButton('退出', self)
        self.btn_quit.setIcon(QIcon('Icon/Quit/quit_red.png'))
        self.btn_quit.setObjectName('left_button')
        self.btn_quit.setToolTip("点击退出本系统")
        self.btn_quit.clicked.connect(self.close)
        self.btn_quit.setMaximumSize(160, 30)
        self.btn_quit.setFont(QFont("SimHei", 13))
        self.left_up_layout.addWidget(self.btn_quit, 4, 0, 1, 1)

    # 数据预处理页面（状态1）下按钮
    def addButton_status1(self):

        # 初始状态下右上角背景图片
        self.setStyleSheet("#right_widget{border-image:url(Background/background.png);}")

        '''
            左上按钮布局
        '''

        # 清洗右侧页面
        if self.findChild(QFrame, 'right_help_status0'):
            self.frame_help0.setVisible(False)

        # 清洗左侧页面
        while (self.findChild(QPushButton, 'left_button')):
            self.left_layout.removeWidget(self.findChild(QPushButton, 'left_button'))
            sip.delete(self.findChild(QPushButton, 'left_button'))

        # 添加选择数据及数据上传按钮
        self.btn_selectData = QPushButton('选择数据', self)
        self.btn_selectData.setIcon(QIcon('Icon/SelectData/selectData_white.png'))
        self.btn_selectData.setObjectName('left_button')
        self.btn_selectData.setFont(QFont("SimHei", 13))
        self.btn_selectData.setToolTip("点击选择数据文件")
        self.btn_selectData.clicked.connect(self.selectData)
        self.left_up_layout.addWidget(self.btn_selectData, 1, 0, 1, 1)
        self.btn_selectData.setMaximumSize(160, 30)

        self.btn_uploadData = QPushButton('数据上传', self)
        self.btn_uploadData.setIcon(QIcon('Icon/UploadData/uploadData_white.png'))
        self.btn_uploadData.setObjectName('left_button')
        self.btn_uploadData.setToolTip("点击上传数据文件")
        self.btn_uploadData.setFont(QFont("SimHei", 13))
        self.btn_uploadData.clicked.connect(self.uploadData)
        self.left_up_layout.addWidget(self.btn_uploadData, 0, 0, 1, 1)
        self.btn_uploadData.setMaximumSize(160, 30)

        # 数据参数设置按钮
        self.btn_dataConfig = QPushButton('数据参数设置', self)
        self.btn_dataConfig.setIcon(QIcon('Icon/Config/config_white.png'))
        self.btn_dataConfig.setObjectName('left_button')
        self.btn_dataConfig.setToolTip("点击设置数据处理相关参数")
        self.btn_dataConfig.setFont(QFont("SimHei", 13))
        self.btn_dataConfig.clicked.connect(self.dataConfig)
        self.left_up_layout.addWidget(self.btn_dataConfig, 2, 0, 1, 1)
        self.btn_dataConfig.setMaximumSize(160, 30)

        # 数据处理按钮
        self.btn_dataProcess = QPushButton('数据处理', self)
        self.btn_dataProcess.setIcon(QIcon('Icon/Process/process_white.png'))
        self.btn_dataProcess.setObjectName('left_button')
        self.btn_dataProcess.setToolTip("点击开始数据预处理")
        self.btn_dataProcess.setFont(QFont("SimHei", 13))
        self.btn_dataProcess.clicked.connect(self.dataProcess)
        self.left_up_layout.addWidget(self.btn_dataProcess, 3, 0, 1, 1)
        self.btn_dataProcess.setMaximumSize(160, 30)

        # 下载结果按钮
        # self.btn_download = QPushButton('下载结果', self)
        # self.btn_download.setIcon(QIcon('Icon/Download/download_white.png'))
        # self.btn_download.setObjectName('left_button')
        # self.btn_download.setToolTip("点击下载数据处理结果")
        # self.btn_download.clicked.connect(self.download)
        # self.btn_download.setFont(QFont("SimHei", 13))
        # self.left_up_layout.addWidget(self.btn_download, 4, 0, 1, 1)
        # self.btn_download.setMaximumSize(160, 30)
        # self.btn_download.setEnabled(False)

        # 帮助按钮
        self.btn_help = QPushButton('帮助', self)
        self.btn_help.setIcon(QIcon('Icon/Help/help_white.png'))
        self.btn_help.setObjectName('left_button')
        self.btn_help.setToolTip("点击显示帮助")
        self.btn_help.clicked.connect(self.help_status1)
        self.left_up_layout.addWidget(self.btn_help, 5, 0, 1, 1)
        self.btn_help.setMaximumSize(160, 30)
        self.btn_help.setFont(QFont("SimHei", 13))

        # 返回主页面按钮
        self.btn_return = QPushButton('返回', self)
        self.btn_return.setIcon(QIcon('Icon/Return/return_white.png'))
        self.btn_return.setObjectName('left_button')
        self.btn_return.setToolTip("点击返回主页面")
        self.btn_return.clicked.connect(self.addButton_status0)
        self.btn_return.setMaximumSize(160, 30)
        self.btn_return.setFont(QFont("SimHei", 13))
        self.left_up_layout.addWidget(self.btn_return, 6, 0, 1, 1)

    # 模型训练页面（状态2）下按钮
    def addButton_status2(self):

        # 初始状态下右上角背景图片
        self.setStyleSheet("#right_widget{border-image:url(Background/background.png);}")

        '''
            左上按钮布局
        '''

        # 清洗右侧页面
        if self.findChild(QFrame, 'right_help_status0'):
            self.frame_help0.setVisible(False)

        # 清洗左侧页面
        while (self.findChild(QPushButton, 'left_button')):
            self.left_layout.removeWidget(self.findChild(QPushButton, 'left_button'))
            sip.delete(self.findChild(QPushButton, 'left_button'))

        # 模型参数设置按钮
        self.btn_modelConfig = QPushButton('模型参数设置', self)
        self.btn_modelConfig.setIcon(QIcon('Icon/Config/config_white.png'))
        self.btn_modelConfig.setObjectName('left_button')
        self.btn_modelConfig.setToolTip("点击设置模型训练相关参数")
        self.btn_modelConfig.clicked.connect(self.modelConfig)
        self.left_up_layout.addWidget(self.btn_modelConfig, 0, 0, 1, 1)
        self.btn_modelConfig.setMaximumSize(160, 30)
        self.btn_modelConfig.setFont(QFont("SimHei", 13))

        # 模型训练按钮
        self.btn_train = QPushButton('开始训练', self)
        self.btn_train.setIcon(QIcon('Icon/Process/process_white.png'))
        self.btn_train.setObjectName('left_button')
        self.btn_train.setToolTip("点击开始模型训练")
        self.btn_train.clicked.connect(self.train)
        self.left_up_layout.addWidget(self.btn_train, 1, 0, 1, 1)
        self.btn_train.setMaximumSize(160, 30)
        self.btn_train.setFont(QFont("SimHei", 13))

        # 帮助按钮
        self.btn_help = QPushButton('帮助', self)
        self.btn_help.setIcon(QIcon('Icon/Help/help_white.png'))
        self.btn_help.setObjectName('left_button')
        self.btn_help.setToolTip("点击显示帮助")
        self.btn_help.clicked.connect(self.help_status2)
        self.btn_help.setFont(QFont("SimHei", 15))
        self.left_up_layout.addWidget(self.btn_help, 2, 0, 1, 1)
        self.btn_help.setMaximumSize(160, 30)
        self.btn_help.setFont(QFont("SimHei", 13))

        # 返回主页面按钮
        self.btn_return = QPushButton('返回', self)
        self.btn_return.setIcon(QIcon('Icon/Return/return_white.png'))
        self.btn_return.setObjectName('left_button')
        self.btn_return.setToolTip("点击返回主页面")
        self.btn_return.clicked.connect(self.addButton_status0)
        self.btn_return.setMaximumSize(160, 30)
        self.btn_return.setFont(QFont("SimHei", 13))
        self.left_up_layout.addWidget(self.btn_return, 3, 0, 1, 1)

    # 模型测试页面（状态3）下按钮
    def addButton_status3(self):

        # 初始状态下右上角背景图片
        self.setStyleSheet("#right_widget{border-image:url(Background/background.png);}")

        '''
            左上按钮布局
        '''

        # 清洗右侧页面
        if self.findChild(QFrame, 'right_help_status0'):
            self.frame_help0.setVisible(False)

        # 清洗左侧页面
        while (self.findChild(QPushButton, 'left_button')):
            self.left_layout.removeWidget(self.findChild(QPushButton, 'left_button'))
            sip.delete(self.findChild(QPushButton, 'left_button'))

        # 选择模型按钮
        self.btn_selectModel = QPushButton('选择模型', self)
        self.btn_selectModel.setIcon(QIcon('Icon/SelectData/selectData_white.png'))
        self.btn_selectModel.setObjectName('left_button')
        self.btn_selectModel.setToolTip("点击选择测试采用的模型")
        self.btn_selectModel.clicked.connect(self.selectModel)
        self.left_up_layout.addWidget(self.btn_selectModel, 0, 0, 1, 1)
        self.btn_selectModel.setMaximumSize(160, 30)
        self.btn_selectModel.setFont(QFont("SimHei", 13))

        # 模型测试按钮
        self.btn_test = QPushButton('模型测试', self)
        self.btn_test.setIcon(QIcon('Icon/Test/test_white.png'))
        self.btn_test.setObjectName('left_button')
        self.btn_test.setToolTip("点击开始模型测试")
        self.btn_test.clicked.connect(self.test)
        self.left_up_layout.addWidget(self.btn_test, 1, 0, 1, 1)
        self.btn_test.setMaximumSize(160, 30)
        self.btn_test.setFont(QFont("SimHei", 13))

        # 下载结果按钮
        self.btn_download = QPushButton('下载结果', self)
        self.btn_download.setIcon(QIcon('Icon/Download/download_white.png'))
        self.btn_download.setObjectName('left_button')
        self.btn_download.setToolTip("点击下载模型测试结果")
        self.btn_download.clicked.connect(self.downloadTest)
        self.left_up_layout.addWidget(self.btn_download, 2, 0, 1, 1)
        self.btn_download.setMaximumSize(160, 30)
        self.btn_download.setFont(QFont("SimHei", 13))
        self.btn_download.setEnabled(False)

        # 帮助按钮
        self.btn_help = QPushButton('帮助', self)
        self.btn_help.setIcon(QIcon('Icon/Help/help_white.png'))
        self.btn_help.setObjectName('left_button')
        self.btn_help.setToolTip("点击显示帮助")
        self.btn_help.clicked.connect(self.help_status3)
        self.btn_help.setFont(QFont("SimHei", 15))
        self.left_up_layout.addWidget(self.btn_help, 3, 0, 1, 1)
        self.btn_help.setMaximumSize(160, 30)
        self.btn_help.setFont(QFont("SimHei", 13))

        # 返回主页面按钮
        self.btn_return = QPushButton('返回', self)
        self.btn_return.setIcon(QIcon('Icon/Return/return_white.png'))
        self.btn_return.setObjectName('left_button')
        self.btn_return.setToolTip("点击返回主页面")
        self.btn_return.clicked.connect(self.addButton_status0)
        self.btn_return.setMaximumSize(160, 30)
        self.btn_return.setFont(QFont("SimHei", 13))
        self.left_up_layout.addWidget(self.btn_return, 4, 0, 1, 1)

    # 主界面帮助选项
    def help_status0(self):

        # 初始状态下右上角背景图片
        self.setStyleSheet("#right_widget{border-image:url(Background/daxing/daxing_opacity_0.7.png);}")

        if self.findChild(QFrame, 'right_help_status0'):
            self.frame_help0.setVisible(True)
        else:

            # 在右上角布局中创建一个frame
            self.frame_help0 = QFrame()
            self.frame_help0.setObjectName('right_help_status0')
            self.right_up_layout.addWidget(self.frame_help0)

            # 创建右上部分布局
            self.right_layout_help0 = QVBoxLayout()
            self.frame_help0.setLayout(self.right_layout_help0)

            # 创建标题子布局
            self.right_title_layout = QHBoxLayout()
            self.right_title_widget = QWidget()
            self.right_title_widget.setLayout(self.right_title_layout)

            # 创建标题
            self.help_title = QLabel()
            self.help_title.setText('帮助')

            self.right_title_layout.addStretch(1)
            self.right_title_layout.addWidget(self.help_title)
            self.right_title_layout.addStretch(1)

            self.help_title.setStyleSheet("font:bold 28px")

            # 创建正文子布局
            self.right_text_layout = QHBoxLayout()
            self.right_text_widget = QWidget()
            self.right_text_widget.setLayout(self.right_text_layout)

            # 创建正文
            self.help_text = QLabel()
            self.help_text.setText('    本系统为旅客支付意愿评估系统，包含数据处理、模型训练及模型\n测试三大模块，标准使用流程为数据处理->模型训练->模型测试,欢迎\n您的使用！\n\n\n'
                                   '1.数据预处理是包含选择数据/数据上传、数据参数设置、数据处理及\n下载结果在内的数据处理模块\n\n\n'
                                   '2.模型训练是包含模型参数设置、模型训练及结果动态展示在内的模型\n训练模块\n\n\n'
                                   '3.模型测试是包含选择要测试的模型、模型测试及下载结果在内的模型\n测试模块\n\n\n'
                                   '4.每个页面都有帮助按钮，您可以通过点击帮助按钮获取当前页面操作\n指南\n\n\n'
                                   '5.点击退出按钮即可退出本系统\n')
            self.help_text.setMaximumWidth(500)
            self.right_text_layout.addWidget(self.help_text)
            self.help_text.setStyleSheet("font-size:15px")

            # 设置右侧整体布局
            self.right_layout_help0.addWidget(self.right_title_widget)
            # self.right_layout_help0.addStretch(1)
            self.right_layout_help0.addWidget(self.right_text_widget)
            self.right_layout_help0.addStretch(1)

    # 子界面1帮助选项
    def help_status1(self):

        # 初始状态下右上角背景图片
        self.setStyleSheet("#right_widget{border-image:url(Background/daxing/daxing_opacity_0.7.png);}")
        # 清洗右侧页面
        if self.findChild(QFrame, 'right_dataProcess'):
            self.frame_dataProcess.setVisible(False)
        if self.findChild(QFrame, 'right_help_status1'):
            self.frame_help1.setVisible(True)
        else:

            # 在右上角布局中创建一个frame
            self.frame_help1 = QFrame()
            self.frame_help1.setObjectName('right_help_status1')
            self.right_up_layout.addWidget(self.frame_help1)

            # 创建右上部分布局
            self.right_layout_help1 = QVBoxLayout()
            self.frame_help1.setLayout(self.right_layout_help1)

            # 创建标题子布局
            self.right_title_layout1 = QHBoxLayout()
            self.right_title_widget1 = QWidget()
            self.right_title_widget1.setLayout(self.right_title_layout1)

            # 创建标题
            self.help_title1 = QLabel()
            self.help_title1.setText('帮助')

            self.right_title_layout1.addStretch(1)
            self.right_title_layout1.addWidget(self.help_title1)
            self.right_title_layout1.addStretch(1)

            self.help_title1.setStyleSheet("font:bold 28px")

            # 创建正文子布局
            self.right_text_layout1 = QHBoxLayout()
            self.right_text_widget1 = QWidget()
            self.right_text_widget1.setLayout(self.right_text_layout1)

            # 创建正文
            self.help_text1 = QLabel()
            self.help_text1.setText(
                '    本模块标准使用流程为（数据上传）->选择数据->数据参数设置->\n'
                '数据处理->下载结果，若已经上传此数据，可以直接选择数据\n\n'
                '1.数据上传需要先命名原始数据集，名称里只能包含数字、下划线或英\n'
                '文；然后选择所在文件夹并上传文件；最终点击确定按钮加载原始数据集\n\n'
                '2.选择数据是读取已加载的数据集列表，从中选择您要处理的原始数据\n集；如若没有，请重新上传\n\n'
                '3.数据参数设置需要命名待生成的目标数据集，名称里只能包含数字、\n'
                '下划线或英文；然后设置训练集占比，注意为0.0-1.0间的1位小数；\n最后设置处理后的序列长度并点击确认\n\n'
                '4.数据处理是处理原始数据集并展示统计结果，详细结果在下载结果中\n展示\n\n'
                '5.点击返回按钮即可返回主页面\n'
            )
            self.help_text1.setMaximumWidth(500)
            self.right_text_layout1.addWidget(self.help_text1)
            self.help_text1.setStyleSheet("font-size:15px")

            # 设置右侧整体布局
            self.right_layout_help1.addWidget(self.right_title_widget1)
            # self.right_layout_help0.addStretch(1)
            self.right_layout_help1.addWidget(self.right_text_widget1)
            self.right_layout_help1.addStretch(1)

    # 子界面2帮助选项
    def help_status2(self):

        # 初始状态下右上角背景图片
        self.setStyleSheet("#right_widget{border-image:url(Background/daxing/daxing_opacity_0.7.png);}")

        if self.findChild(QFrame, 'right_help_status2'):
            self.frame_help2.setVisible(True)
        else:

            # 在右上角布局中创建一个frame
            self.frame_help2 = QFrame()
            self.frame_help2.setObjectName('right_help_status2')
            self.right_up_layout.addWidget(self.frame_help2)

            # 创建右上部分布局
            self.right_layout_help2 = QVBoxLayout()
            self.frame_help2.setLayout(self.right_layout_help2)

            # 创建标题子布局
            self.right_title_layout2 = QHBoxLayout()
            self.right_title_widget2 = QWidget()
            self.right_title_widget2.setLayout(self.right_title_layout2)

            # 创建标题
            self.help_title2 = QLabel()
            self.help_title2.setText('帮助')

            self.right_title_layout2.addStretch(1)
            self.right_title_layout2.addWidget(self.help_title2)
            self.right_title_layout2.addStretch(1)

            self.help_title2.setStyleSheet("font:bold 24px")

            # 创建正文子布局
            self.right_text_layout2 = QHBoxLayout()
            self.right_text_widget2 = QWidget()
            self.right_text_widget2.setLayout(self.right_text_layout2)

            # 创建正文
            self.help_text2 = QLabel()
            self.help_text2.setText(
                '    本模块标准使用流程为模型参数设置->选择数据->开始训练，开始\n训练后其他按钮不可选取，开始训练按钮变为取消训练按钮，可以取消\n'
                '训练，取消训练需重新设置参数后再训练；设置参数参考以下：\n\n'
                '1）算法模型名称：与此前命名规则一致\n'
                '2）学习率：深度模型参数更新学习率，该值在区间(0,1)\n'
                '3）eps：Adam优化器参数，该值在区间(0,1)\n'
                '4）weight_decay：Adam优化器参数，该值在区间(0,1)\n'
                '5）总迭代次数：批训练中参数更新的次数，小于等于10万次\n'
                '6）评估间隔：每迭代k次，用测试集测试模型\n'
                '7）从第几次开始评估：推荐不熟悉的时候从第0次开始评估，熟悉了以\n后可以根据经验从几千步以后开始评估，可以加快训练速度\n'
                '8）训练batchsize：批训练过程中每次选择的批大小\n'
                '9）序列长度：预测需要的历史序列长度，该值大于等于1且小于数据处\n理时的序列长度\n'
                '10）栈的个数：N-Beats网络中的栈，该值范围在[2,5]\n'
                '11）块类型：N-Beats各个栈中块的类型，取值范围是{0，1，2}，其中\n0为TREND_BLOCK，1为SEASONALITY_BLOCK，2为GENERIC_BLOCK\n'
                '12）块的个数：N-Beats中每个栈中块的个数，该值在区间[1,10]\n'
                '13）theta_维度：N-Beats各个栈中theta值的维度，取值范围同上\n'
                '14）LSTM隐藏状态大小：取值范围为{8,16,32,...,4096}\n'
                '15）n-beats隐藏层大小：N-Beats网络中隐藏层大小，取值范围同上\n'
                '16）图卷积特征数：图特征向量中向量的维度，取值范围同上\n'
                '17）图卷积层数：图卷积网络的深度，取值范围大于等于1\n\n'
            )
            self.help_text2.setMaximumWidth(500)
            self.right_text_layout2.addWidget(self.help_text2)
            self.help_text2.setStyleSheet("font-size:15px")

            # 设置右侧整体布局
            self.right_layout_help2.addWidget(self.right_title_widget2)
            # self.right_layout_help0.addStretch(1)
            self.right_layout_help2.addWidget(self.right_text_widget2)
            self.right_layout_help2.addStretch(1)

    # 子界面3帮助选项
    def help_status3(self):

        # 初始状态下右上角背景图片
        self.setStyleSheet("#right_widget{border-image:url(Background/daxing/daxing_opacity_0.7.png);}")
        # 清洗右侧页面
        if self.findChild(QFrame, 'right_test'):
            self.frame_test.setVisible(False)
        if self.findChild(QFrame, 'right_help_status3'):
            self.frame_help3.setVisible(True)
        else:

            # 在右上角布局中创建一个frame
            self.frame_help3 = QFrame()
            self.frame_help3.setObjectName('right_help_status3')
            self.right_up_layout.addWidget(self.frame_help3)

            # 创建右上部分布局
            self.right_layout_help3 = QVBoxLayout()
            self.frame_help3.setLayout(self.right_layout_help3)

            # 创建标题子布局
            self.right_title_layout3 = QHBoxLayout()
            self.right_title_widget3 = QWidget()
            self.right_title_widget3.setLayout(self.right_title_layout3)

            # 创建标题
            self.help_title3 = QLabel()
            self.help_title3.setText('帮助\n')

            self.right_title_layout3.addStretch(1)
            self.right_title_layout3.addWidget(self.help_title3)
            self.right_title_layout3.addStretch(1)

            self.help_title3.setStyleSheet("font:bold 28px")

            # 创建正文子布局
            self.right_text_layout3 = QHBoxLayout()
            self.right_text_widget3 = QWidget()
            self.right_text_widget3.setLayout(self.right_text_layout3)

            # 创建正文
            self.help_text3 = QLabel()
            self.help_text3.setText(
                '    本模块标准使用流程为选择模型->模型测试->下载结果\n\n\n'
                '1.选择模型，模型名称为此前定义的 数据集名称|方法名 \n拼接得来，点击确定按钮选择要测试的模型\n\n\n'
                '2.模型测试是对选定的已训练好的模型进行测试\n\n\n'
                '3.下载结果本来不可选取，测试结束后点击下载结果即可\n获取详细测试结果\n\n\n'
                '4.点击返回按钮即可返回主页面\n\n\n'
            )
            self.help_text3.setMaximumWidth(500)
            self.right_text_layout3.addWidget(self.help_text3)
            self.help_text3.setStyleSheet("font-size:17px")

            # 设置右侧整体布局
            self.right_layout_help3.addWidget(self.right_title_widget3)
            # self.right_layout_help0.addStretch(1)
            self.right_layout_help3.addWidget(self.right_text_widget3)
            self.right_layout_help3.addStretch(1)

    # 选择数据文件
    def selectData(self):
        # 初始状态下右上角背景图片
        self.setStyleSheet("#right_widget{border-image:url(Background/background.png);}")
        # 清洗右侧页面
        if self.findChild(QFrame, 'right_help_status1'):
            self.frame_help1.setVisible(False)
        # 清洗右侧页面
        if self.findChild(QFrame, 'right_dataProcess'):
            self.frame_dataProcess.setVisible(False)

        url = ServerAddress + '/getDataDirectory'
        res = requests.get(url=url)
        data = res.json()
        data = data['directory']
        print(data)
        if len(data) > 0:
            self.sd = SelectData(data)
            center(self.sd)
            self.sd.show()
        else:
            self.statusBar.showMessage('当前没有数据文件，请先上传数据文件')

    # 上传数据文件
    def uploadData(self):
        # 初始状态下右上角背景图片
        self.setStyleSheet("#right_widget{border-image:url(Background/background.png);}")
        # 清洗右侧页面
        if self.findChild(QFrame, 'right_help_status1'):
            self.frame_help1.setVisible(False)

        # 清洗右侧页面
        if self.findChild(QFrame, 'right_dataProcess'):
            self.frame_dataProcess.setVisible(False)
        self.ud = UploadData()
        center(self.ud)
        self.ud.show()

    # 数据参数设置
    def dataConfig(self):
        # 初始状态下右上角背景图片
        self.setStyleSheet("#right_widget{border-image:url(Background/background.png);}")
        # 清洗右侧页面
        if self.findChild(QFrame, 'right_dataProcess'):
            self.frame_dataProcess.setVisible(False)
        # 清洗右侧页面
        if self.findChild(QFrame, 'right_help_status1'):
            self.frame_help1.setVisible(False)
        self.sdc = SetDataConfig()
        center(self.sdc)
        self.sdc.show()

    # 数据处理
    def dataProcess(self):
        global data_excel
        if self.findChild(QFrame, 'right_dataProcess'):
            self.frame_dataProcess.setVisible(False)
        # 初始状态下右上角背景图片
        self.setStyleSheet("#right_widget{border-image:url(Background/background.png);}")
        # 清洗右侧页面
        if self.findChild(QFrame, 'right_help_status1'):
            self.frame_help1.setVisible(False)
        t2 = threading.Thread(target=signal_dataprocess, args=(self,))
        t2.start()

        i = 0
        j = 0
        while True:
            if j > 500:
                self.statusBar.showMessage('数据处理失败，请重试')
                return
            time.sleep(1)
            if i % 11 == 0:
                self.statusBar.showMessage('0%')
            elif i % 11 == 1:
                self.statusBar.showMessage('███10%')
            elif i % 11 == 2:
                self.statusBar.showMessage('█████20%')
            elif i % 11 == 3:
                self.statusBar.showMessage('███████30%')
            elif i % 11 == 4:
                self.statusBar.showMessage('█████████40%')
            elif i % 11 == 5:
                self.statusBar.showMessage('███████████50%')
            elif i % 11 == 6:
                self.statusBar.showMessage('█████████████60%')
            elif i % 11 == 7:
                self.statusBar.showMessage('███████████████70%')
            elif i % 11 == 8:
                self.statusBar.showMessage('█████████████████80%')
            elif i % 11 == 9:
                self.statusBar.showMessage('███████████████████90%')
            elif i % 11 == 10 and len(d['data']) != 0:
                self.statusBar.showMessage('█████████████████████100%')
                time.sleep(0.5)
                break
            if i != 10:
                i += 1
            j += 1
            gui()

        self.statusBar.showMessage('数据处理成功')
        data = d['data']
        data_display = {}
        data['数据总数'] = data['num_data']
        data.pop('num_data')

        data['用户数'] = data['n_user']
        data.pop('n_user')

        data['项目数'] = data['m_item']
        data.pop('m_item')

        data['用户-项目矩阵稀疏度'] = data['Sparsity']
        data.pop('Sparsity')


        data['测试集大小'] = data['testDataSize']
        data.pop('testDataSize')

        data['训练集大小'] = data['trainDataSize']
        data.pop('trainDataSize')

        data_excel = data

        if self.findChild(QFrame, 'right_dataProcess'):
            self.frame_dataProcess.setVisible(True)
        else:
            # 在右上角布局中创建一个frame
            self.frame_dataProcess = QFrame()
            self.frame_dataProcess.setObjectName('right_dataProcess')
            self.right_up_layout.addWidget(self.frame_dataProcess)

            # 创建右上部分布局
            self.right_layout_dataProcess = QGridLayout()
            self.frame_dataProcess.setLayout(self.right_layout_dataProcess)
            self.tableview = QTableView()
            self.model = QStandardItemModel(8, 2)
            self.model.setHorizontalHeaderLabels(['统计名称', '统计数目'])
            self.tableview.setModel(self.model)
            self.tableview.setObjectName('tableview')
            self.tableview.setEditTriggers(QAbstractItemView.NoEditTriggers)
            self.tableview.verticalHeader().setVisible(False)
            self.tableview.setShowGrid(False)
            self.tableview.setMaximumSize(300, 220)
            self.tableview.setFont(QFont("SimHei", 11))
            self.tableview.horizontalHeader().setFont(QFont("SimHei", 11))
            self.tableview.setStyleSheet('''
                        QTableView , QTableWidget{
                            selection-background-color: qlineargradient(x1: 0, y1: 0, x2: 0.7, y2: 0.7,
                                            stop: 0 #6E8FB9, stop: 1 #485E79);
                            background-color:silver;
                            border:1px solid #E0DDDC;
                            gridline-color:lightGray;
                            border-radius:10px;
                        }
                        QHeaderView::section{
                            background-color:silver;
                            border:0px solid #E0DDDC;
                            border-bottom:1px solid #E0DDDC;
                        }
                        ''')
            self.tableview.resizeColumnsToContents()
            self.tableview.resizeRowsToContents()
            self.tableview.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
            self.right_layout_dataProcess.addWidget(self.tableview)

        i = 3
        for key in data:
            if key == '数据总数':
                self.model.setItem(0, 0, QStandardItem(str(key)))
                self.model.setItem(0, 1, QStandardItem(str(data[key])))
            elif key == '训练集大小':
                self.model.setItem(1, 0, QStandardItem(str(key)))
                self.model.setItem(1, 1, QStandardItem(str(data[key])))
            elif key == '测试集大小':
                self.model.setItem(2, 0, QStandardItem(str(key)))
                self.model.setItem(2, 1, QStandardItem(str(data[key])))
            else:
                self.model.setItem(i, 0, QStandardItem(str(key)))
                self.model.setItem(i, 1, QStandardItem(str(data[key])))
                i = i + 1

        self.setStyleSheet("#right_widget{border-image:url(Background/daxing/daxing_opacity_0.7.png);}")
        # self.btn_download.setEnabled(True)
        d['data'] = {}

    # 下载结果
    def download(self):
        # 初始状态下右上角背景图片
        self.setStyleSheet("#right_widget{border-image:url(Background/background.png);}")
        # 清洗右侧页面
        if self.findChild(QFrame, 'right_dataProcess'):
            self.frame_dataProcess.setVisible(False)
        # 清洗右侧页面
        if self.findChild(QFrame, 'right_help_status1'):
            self.frame_help1.setVisible(False)
        excel_title = []
        for key in data_excel:
            excel_title.append(key)
        dict_to_excel(data_excel, excel_title, 'data_result.xlsx')
        os.startfile('data_result.xlsx')
        self.statusBar.showMessage('下载结果成功')

    # 模型相关参数设置
    def modelConfig(self):
        # 初始状态下右上角背景图片
        self.setStyleSheet("#right_widget{border-image:url(Background/background.png);}")
        # 屏蔽模块内操作
        # 清洗右侧页面
        if self.findChild(QFrame, 'right_help_status2'):
            self.frame_help2.setVisible(False)
        self.smc = SetModelConfig()
        center(self.smc)
        self.smc.show()

    # 训练（flag_train True为停止训练|False为开始训练）
    def train(self):
        global stop_thread
        global t1
        print('-----||||||--------------')
        # 初始状态下右上角背景图片
        self.setStyleSheet("#right_widget{border-image:url(Background/background.png);}")
        if self.findChild(QFrame, 'right_train'):
            print('-------------------')
            self.frame_train.setVisible(False)
            print('-----------------x')
            print(d['last_readnum'])
            if d['last_readnum'] < 100:
                self.acc_1_QSplineSeries.removePoints(0, d['last_readnum'])
                self.acc_2_QSplineSeries.removePoints(0, d['last_readnum'])
                self.acc_3_QSplineSeries.removePoints(0, d['last_readnum'])
                self.acc_4_QSplineSeries.removePoints(0, d['last_readnum'])
                self.acc_5_QSplineSeries.removePoints(0, d['last_readnum'])
                self.mrr_QSplineSeries.removePoints(0, d['last_readnum'])
                self.loss_QSplineSeries.removePoints(0, d['last_readnum'])
            else:
                self.acc_1_QSplineSeries.removePoints(0, 100)
                self.acc_2_QSplineSeries.removePoints(0, 100)
                self.acc_3_QSplineSeries.removePoints(0, 100)
                self.acc_4_QSplineSeries.removePoints(0, 100)
                self.acc_5_QSplineSeries.removePoints(0, 100)
                self.mrr_QSplineSeries.removePoints(0, 100)
                self.loss_QSplineSeries.removePoints(0, 100)

            if not self.flag_train:
                # 清洗右侧页面
                if self.findChild(QFrame, 'right_train'):
                    self.right_up_layout.removeWidget(self.findChild(QFrame, 'right_train'))
                    sip.delete(self.findChild(QFrame, 'right_train'))

        print(self.flag_train)
        if self.flag_train == True:
            url = ServerAddress + '/cancelTrain'
            res = requests.get(url=url)
            stop_thread = True
            t1.join()
            if res.text == '取消训练成功':
                self.statusBar.showMessage('取消训练成功')
                self.btn_train.setText('开始训练')
                self.btn_modelConfig.setEnabled(True)
                self.btn_help.setEnabled(True)
                self.btn_return.setEnabled(True)
                self.flag_train = False
                d['last_readnum'] = 0
                d['real_start_signal'] = True
            else:
                self.statusBar.showMessage('取消训练失败，请重试')
                stop_thread = False
                t1 = threading.Thread(target=getTrainData, args=(self,))
                t1.start()
        else:
            url = ServerAddress + '/train'
            res = requests.get(url=url)

            if res.text == '开始训练':

                self.statusBar.showMessage('开始训练')
                self.btn_train.setText('取消训练')
                self.flag_train = True
                self.btn_modelConfig.setEnabled(False)
                self.btn_help.setEnabled(False)
                self.btn_return.setEnabled(False)
                if self.findChild(QFrame, 'right_train'):
                    self.frame_train.setVisible(True)
                else:
                    # 在右上角布局中创建一个frame
                    self.frame_train = QFrame()
                    self.frame_train.setObjectName('right_train')
                    self.right_up_layout.addWidget(self.frame_train)

                    # 创建右上部分布局
                    self.right_layout_train = QGridLayout()
                    self.frame_train.setLayout(self.right_layout_train)

                    self.accQchartView = QChartView(self.right_up_widget)
                    self.accQchartView.setObjectName('accQchartView')
                    self.accQchartView.setGeometry(0, 0, 500, 320)

                    self.mrrQchartView = QChartView(self.right_down_widget)
                    self.mrrQchartView.setObjectName('mrrQchartView')
                    self.mrrQchartView.setGeometry(0, 0, 500, 250)

                    self.acc_1_QSplineSeries = QSplineSeries()
                    self.acc_1_QSplineSeries.setName('ACC@1')
                    self.acc_2_QSplineSeries = QSplineSeries()
                    self.acc_2_QSplineSeries.setName('ACC@2')
                    self.acc_3_QSplineSeries = QSplineSeries()
                    self.acc_3_QSplineSeries.setName('ACC@3')
                    self.acc_4_QSplineSeries = QSplineSeries()
                    self.acc_4_QSplineSeries.setName('ACC@4')
                    self.acc_5_QSplineSeries = QSplineSeries()
                    self.acc_5_QSplineSeries.setName('ACC@5')
                    self.mrr_QSplineSeries = QSplineSeries()
                    self.mrr_QSplineSeries.setName('MRR')
                    self.mrr_QSplineSeries.setPen(QPen(Qt.black, 2, Qt.SolidLine))
                    self.loss_QSplineSeries = QSplineSeries()
                    self.loss_QSplineSeries.setName('loss')

                    self.accQchartView.chart().addSeries(self.acc_1_QSplineSeries)
                    self.accQchartView.chart().addSeries(self.acc_2_QSplineSeries)
                    self.accQchartView.chart().addSeries(self.acc_3_QSplineSeries)
                    self.accQchartView.chart().addSeries(self.acc_4_QSplineSeries)
                    self.accQchartView.chart().addSeries(self.acc_5_QSplineSeries)
                    self.accQchartView.chart().addSeries(self.mrr_QSplineSeries)
                    self.accQchartView.chart().createDefaultAxes()
                    self.accQchartView.chart().axisX().setRange(0, 1000)  # 设置默认x轴量程
                    self.accQchartView.chart().axisX().setTickCount(11)  # 设置x轴坐标轴节点个数
                    self.accQchartView.chart().axisX().setLabelFormat("%0.0f")  # 设置坐标轴精确度
                    self.accQchartView.chart().axisX().setTitleText("训练步数")
                    self.accQchartView.chart().axisX().setTitleFont(QFont("SimHei", 11))
                    self.accQchartView.chart().axisX().setMinorTickCount(0)  # 设置单元格刻度线
                    # self.accQchartView.chart().axisX().setGridLineVisible(False)
                    self.accQchartView.chart().axisY().setRange(40.00, 100.00)  # 设置默认x轴量程
                    self.accQchartView.chart().axisY().setLabelFormat("%0.2f")  # 设置坐标轴精确度
                    self.accQchartView.chart().axisY().setTickCount(7)  # 设置x轴坐标轴节点个数
                    self.accQchartView.chart().axisY().setTitleText("评价指标(%)")
                    self.accQchartView.chart().axisY().setTitleFont(QFont("SimHei", 11))

                    # self.accQchartView.chart().axisY().setGridLineVisible(False)
                    self.accQchartView.chart().axisY().setMinorTickCount(0)  # 设置单元格刻度线

                    self.accQchartView.chart().setBackgroundVisible(visible=False)
                    self.accQchartView.chart().setTitle('ACC@1最大值为  %')
                    self.accQchartView.chart().setTitleFont(QFont("SimHei", 11))
                    self.accQchartView.setRenderHint(QPainter.Antialiasing)  # 设置抗锯齿
                    self.accQchartView.show()

                    self.mrrQchartView.chart().addSeries(self.loss_QSplineSeries)
                    self.mrrQchartView.chart().createDefaultAxes()
                    self.mrrQchartView.chart().axisX().setRange(0, 1000)  # 设置默认x轴量程
                    self.mrrQchartView.chart().axisX().setTickCount(11)  # 设置x轴坐标轴节点个数
                    self.mrrQchartView.chart().axisX().setLabelFormat("%0.0f")  # 设置坐标轴精确度
                    self.mrrQchartView.chart().axisX().setTitleText("训练步数")
                    self.mrrQchartView.chart().axisX().setTitleFont(QFont("SimHei", 11))
                    self.mrrQchartView.chart().axisX().setMinorTickCount(0)  # 设置单元格刻度线
                    # self.mrrQchartView.chart().axisX().setGridLineVisible(False)
                    self.mrrQchartView.chart().axisY().setRange(0, 2)  # 设置默认x轴量程
                    self.mrrQchartView.chart().axisY().setLabelFormat("%0.2f")  # 设置坐标轴精确度
                    self.mrrQchartView.chart().axisY().setTickCount(6)  # 设置x轴坐标轴节点个数
                    self.mrrQchartView.chart().axisY().setTitleText("损失函数")
                    self.mrrQchartView.chart().axisY().setTitleFont(QFont("SimHei", 11))
                    # self.mrrQchartView.chart().axisY().setGridLineVisible(False)
                    self.mrrQchartView.chart().axisY().setMinorTickCount(0)  # 设置单元格刻度线

                    self.mrrQchartView.chart().setBackgroundVisible(visible=False)
                    self.mrrQchartView.chart().legend().hide()

                    self.mrrQchartView.setRenderHint(QPainter.Antialiasing)  # 设置抗锯齿
                    self.mrrQchartView.show()

                    # self.acc_max = QLabel('ACC@1最大值为0.00%')
                    # self.acc_max.setObjectName('acc_max')
                    # self.acc_max.setFont(QFont("SimHei", 15))
                    # self.mrr_max = QLabel('MRR最大值为0.00%')
                    # self.mrr_max.setObjectName('mrr_max')
                    # self.mrr_max.setFont(QFont("SimHei", 15))
                    # self.right_layout.addWidget(self.acc_max, 0, 0, 1, 1)
                    # self.right_layout.addWidget(self.right_up_widget, 1, 0, 100, 1)
                    # self.right_layout.addWidget(self.mrr_max, 101, 0, 1, 1)
                    # self.right_layout.addWidget(self.right_down_widget, 102, 0, 80, 1)
                    self.right_layout_train.addWidget(self.accQchartView, 0, 0)
                    self.right_layout_train.addWidget(self.mrrQchartView, 1, 0)
                self.setStyleSheet("#right_widget{border-image:url(Background/daxing/daxing_opacity_0.7.png);}")
                stop_thread = False
                t1 = threading.Thread(target=getTrainData, args=(self,))
                t1.start()
                i = 0
                while True:
                    time.sleep(1)
                    if i % 11 == 0:
                        self.statusBar.showMessage('0%')
                    elif i % 11 == 1:
                        self.statusBar.showMessage('███10%')
                    elif i % 11 == 2:
                        self.statusBar.showMessage('█████20%')
                    elif i % 11 == 3:
                        self.statusBar.showMessage('███████30%')
                    elif i % 11 == 4:
                        self.statusBar.showMessage('█████████40%')
                    elif i % 11 == 5:
                        self.statusBar.showMessage('███████████50%')
                    elif i % 11 == 6:
                        self.statusBar.showMessage('█████████████60%')
                    elif i % 11 == 7:
                        self.statusBar.showMessage('███████████████70%')
                    elif i % 11 == 8:
                        self.statusBar.showMessage('█████████████████80%')
                    elif i % 11 == 9:
                        self.statusBar.showMessage('███████████████████90%')
                    elif i % 11 == 10 and d['real_start_signal']:
                        self.statusBar.showMessage('█████████████████████100%')
                        break
                    if i != 10:
                        i += 1
                    gui()

            else:
                self.statusBar.showMessage('开始训练失败，请重试')

    # 训练及测试时实时画折线图
    def paintChart(self, acc_1, acc_2, acc_3, acc_4, acc_5, mrr, loss):
        minlen = min(len(acc_5), len(acc_4), len(acc_3), len(acc_2), len(acc_1), len(mrr), len(loss))
        print(minlen)
        if minlen > 0:
            d['real_start_signal'] = True
        addLen = minlen - d['last_readnum']
        print(addLen)
        if addLen > 0:
            acc_1_list = []
            acc_2_list = []
            acc_3_list = []
            acc_4_list = []
            acc_5_list = []
            mrr_list = []
            loss_list = []
            for i in range(addLen):
                x1 = QPointF(int(acc_1[d['last_readnum'] + i][0]),
                             round(100 * acc_1[d['last_readnum'] + i][1], 2))
                print(int(loss[d['last_readnum'] + i][0]),
                      loss[d['last_readnum'] + i][1])
                acc_1_list.append(x1)
                x2 = QPointF(int(acc_2[d['last_readnum'] + i][0]),
                             round(100 * acc_2[d['last_readnum'] + i][1], 2))
                acc_2_list.append(x2)
                x3 = QPointF(int(acc_3[d['last_readnum'] + i][0]),
                             round(100 * acc_3[d['last_readnum'] + i][1], 2))
                acc_3_list.append(x3)
                x4 = QPointF(int(acc_4[d['last_readnum'] + i][0]),
                             round(100 * acc_4[d['last_readnum'] + i][1], 2))
                acc_4_list.append(x4)
                x5 = QPointF(int(acc_5[d['last_readnum'] + i][0]),
                             round(100 * acc_5[d['last_readnum'] + i][1], 2))
                acc_5_list.append(x5)
                x6 = QPointF(int(mrr[d['last_readnum'] + i][0]),
                             round(100 * mrr[d['last_readnum'] + i][1], 2))
                mrr_list.append(x6)
                x7 = QPointF(int(loss[d['last_readnum'] + i][0]),
                             loss[d['last_readnum'] + i][1])

                loss_list.append(x7)
            self.acc_1_QSplineSeries.append(acc_1_list)
            self.acc_2_QSplineSeries.append(acc_2_list)
            self.acc_3_QSplineSeries.append(acc_3_list)
            self.acc_4_QSplineSeries.append(acc_4_list)
            self.acc_5_QSplineSeries.append(acc_5_list)
            self.mrr_QSplineSeries.append(mrr_list)
            self.loss_QSplineSeries.append(loss_list)

            print('d[last_readnum]=' + str(d['last_readnum']))
            if d['last_readnum'] > 100:
                self.acc_1_QSplineSeries.removePoints(0, addLen)
                self.acc_2_QSplineSeries.removePoints(0, addLen)
                self.acc_3_QSplineSeries.removePoints(0, addLen)
                self.acc_4_QSplineSeries.removePoints(0, addLen)
                self.acc_5_QSplineSeries.removePoints(0, addLen)
                self.mrr_QSplineSeries.removePoints(0, addLen)
                self.loss_QSplineSeries.removePoints(0, addLen)
                self.accQchartView.chart().axisX().setRange(len(mrr) * 10 - 1000, len(mrr) * 10)
                self.mrrQchartView.chart().axisX().setRange(len(mrr) * 10 - 1000, len(mrr) * 10)
            d['last_readnum'] = minlen

    def selectModel(self):
        # 初始状态下右上角背景图片
        self.setStyleSheet("#right_widget{border-image:url(Background/background.png);}")
        url = ServerAddress + '/getModelDirectory'
        res = requests.get(url=url)
        data = res.json()
        # 清洗右侧页面
        if self.findChild(QFrame, 'right_help_status3'):
            self.frame_help3.setVisible(False)
        # 清洗右侧页面
        if self.findChild(QFrame, 'right_test'):
            self.frame_test.setVisible(False)
        if len(data) > 0:
            self.sm = SelectModel(data)
            center(self.sm)
            self.sm.show()
        else:
            self.statusBar.showMessage('当前没有模型文件，请先进行模型训练')

    def test(self):
        # 清洗右侧页面
        if self.findChild(QFrame, 'right_help_status3'):
            self.frame_help3.setVisible(False)
        self.setStyleSheet("#right_widget{border-image:url(Background/background.png);}")
        if self.findChild(QFrame, 'right_test'):
            print('-------------------')
            self.frame_test.setVisible(False)
            self.acc_1_cons_QSplineSeries.removePoints(0, d['last_readnum_test'])
            self.acc_2_cons_QSplineSeries.removePoints(0, d['last_readnum_test'])
            self.acc_3_cons_QSplineSeries.removePoints(0, d['last_readnum_test'])
            self.acc_4_cons_QSplineSeries.removePoints(0, d['last_readnum_test'])
            self.acc_5_cons_QSplineSeries.removePoints(0, d['last_readnum_test'])
            self.mrr_cons_QSplineSeries.removePoints(0, d['last_readnum_test'])
        t4 = threading.Thread(target=signal_test, args=(self,))
        t4.start()
        i = 0
        j = 0
        while True:
            if j > 500:
                self.statusBar.showMessage('测试失败，请重试')
                return
            time.sleep(2)
            if i % 11 == 0:
                self.statusBar.showMessage('0%')
            elif i % 11 == 1:
                self.statusBar.showMessage('███10%')
            elif i % 11 == 2:
                self.statusBar.showMessage('█████20%')
            elif i % 11 == 3:
                self.statusBar.showMessage('███████30%')
            elif i % 11 == 4:
                self.statusBar.showMessage('█████████40%')
            elif i % 11 == 5:
                self.statusBar.showMessage('███████████50%')
            elif i % 11 == 6:
                self.statusBar.showMessage('█████████████60%')
            elif i % 11 == 7:
                self.statusBar.showMessage('███████████████70%')
            elif i % 11 == 8:
                self.statusBar.showMessage('█████████████████80%')
            elif i % 11 == 9:
                self.statusBar.showMessage('███████████████████90%')
            elif i % 11 == 10 and len(d['data_test']) != 0:
                self.statusBar.showMessage('█████████████████████100%')
                break
            if i != 10:
                i += 1
            j += 1
            gui()
        data = d['data_test']
        print(data)
        data_tableview = {}
        data_chartview = {}
        data_tableview['acc_1'] = data['acc_1']
        data_tableview['acc_2'] = data['acc_2']
        data_tableview['acc_3'] = data['acc_3']
        data_tableview['acc_4'] = data['acc_4']
        data_tableview['acc_5'] = data['acc_5']
        data_tableview['mrr'] = data['mrr']
        acc_1_cons = data['acc_1_cons']
        acc_2_cons = data['acc_2_cons']
        acc_3_cons = data['acc_3_cons']
        acc_4_cons = data['acc_4_cons']
        acc_5_cons = data['acc_5_cons']
        mrr_cons = data['mrr_cons']
        if self.findChild(QFrame, 'right_test'):
            self.frame_test.setVisible(True)
        else:
            # 在右上角布局中创建一个frame
            self.frame_test = QFrame()
            self.frame_test.setObjectName('right_test')
            self.right_up_layout.addWidget(self.frame_test)

            # 创建右上部分布局
            self.right_layout_test = QGridLayout()
            self.frame_test.setLayout(self.right_layout_test)

            self.acc_cons_QchartView = QChartView(self.right_up_widget)
            self.acc_cons_QchartView.setObjectName('acc_cons_QchartView')
            self.acc_cons_QchartView.setGeometry(0, 0, 500, 290)
            self.acc_1_cons_QSplineSeries = QSplineSeries()
            self.acc_1_cons_QSplineSeries.setName('ACC@1')
            self.acc_2_cons_QSplineSeries = QSplineSeries()
            self.acc_2_cons_QSplineSeries.setName('ACC@2')
            self.acc_3_cons_QSplineSeries = QSplineSeries()
            self.acc_3_cons_QSplineSeries.setName('ACC@3')
            self.acc_4_cons_QSplineSeries = QSplineSeries()
            self.acc_4_cons_QSplineSeries.setName('ACC@4')
            self.acc_5_cons_QSplineSeries = QSplineSeries()
            self.acc_5_cons_QSplineSeries.setName('ACC@5')
            self.mrr_cons_QSplineSeries = QSplineSeries()
            self.mrr_cons_QSplineSeries.setName('MRR')
            self.mrr_cons_QSplineSeries.setPen(QPen(Qt.black, 2, Qt.SolidLine))

            self.acc_cons_QchartView.chart().addSeries(self.acc_1_cons_QSplineSeries)
            self.acc_cons_QchartView.chart().addSeries(self.acc_2_cons_QSplineSeries)
            self.acc_cons_QchartView.chart().addSeries(self.acc_3_cons_QSplineSeries)
            self.acc_cons_QchartView.chart().addSeries(self.acc_4_cons_QSplineSeries)
            self.acc_cons_QchartView.chart().addSeries(self.acc_5_cons_QSplineSeries)
            self.acc_cons_QchartView.chart().addSeries(self.mrr_cons_QSplineSeries)
            self.acc_cons_QchartView.chart().createDefaultAxes()
            self.acc_cons_QchartView.chart().axisX().setLabelFormat("%0.0f")  # 设置坐标轴精确度
            self.acc_cons_QchartView.chart().axisX().setTitleText("样本个数")
            self.acc_cons_QchartView.chart().axisX().setTitleFont(QFont("SimHei", 11))
            self.acc_cons_QchartView.chart().axisX().setMinorTickCount(0)  # 设置单元格刻度线
            # self.accQchartView.chart().axisX().setGridLineVisible(False)
            self.acc_cons_QchartView.chart().axisY().setRange(0.00, 100.00)  # 设置默认x轴量程
            self.acc_cons_QchartView.chart().axisY().setLabelFormat("%0.2f")  # 设置坐标轴精确度
            self.acc_cons_QchartView.chart().axisY().setTickCount(6)  # 设置x轴坐标轴节点个数
            self.acc_cons_QchartView.chart().axisY().setTitleText("评价指标(%)")
            self.acc_cons_QchartView.chart().axisY().setTitleFont(QFont("SimHei", 11))
            self.acc_cons_QchartView.setStyleSheet("background-color:silver;")
            # self.accQchartView.chart().axisY().setGridLineVisible(False)
            self.acc_cons_QchartView.chart().axisY().setMinorTickCount(0)  # 设置单元格刻度线

            self.acc_cons_QchartView.chart().setBackgroundVisible(visible=False)
            # self.accQchartView.chart().setTitle('旅客支付意愿评估准确率(%)')
            self.acc_cons_QchartView.setRenderHint(QPainter.Antialiasing)  # 设置抗锯齿

            self.tableview = QTableView()
            self.tableview.setMaximumSize(217.5, 175)
            self.model = QStandardItemModel(6, 2)
            self.model.setHorizontalHeaderLabels(['评价标准', '数值(%)'])
            self.tableview.setModel(self.model)
            self.tableview.setObjectName('testTableview')
            self.tableview.setEditTriggers(QAbstractItemView.NoEditTriggers)
            self.tableview.verticalHeader().setVisible(False)
            self.tableview.setShowGrid(False)
            self.tableview.setFont(QFont("SimHei", 11))
            self.tableview.horizontalHeader().setFont(QFont("SimHei", 11))
            self.tableview.resizeColumnsToContents()
            self.tableview.resizeRowsToContents()
            self.tableview.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
            # self.testNum = QLabel()
            # self.testNum.setObjectName('testNum')
            # self.testNum.setMaximumSize(180, 30)
            self.right_layout_test.addWidget(self.acc_cons_QchartView, 0, 0)
            self.hboxTableView = QHBoxLayout()
            self.hboxTableView.addStretch(1)
            self.hboxTableView.addWidget(self.tableview)
            self.hboxTableView.addStretch(1)
            self.right_layout_test.addLayout(self.hboxTableView, 1, 0)
            self.tableview.setStyleSheet('''
                QTableView , QTableWidget{
                    selection-background-color: qlineargradient(x1: 0, y1: 0, x2: 0.7, y2: 0.7,
                                    stop: 0 #6E8FB9, stop: 1 #485E79);
                    background-color:silver;
                    border:1px solid #E0DDDC;
                    gridline-color:lightGray;
                    border-radius:10px;
                }
                QHeaderView::section{
                    background-color:silver;
                    border:0px solid #E0DDDC;
                    border-bottom:1px solid #E0DDDC;
                }
            ''')

        len_cons = len(acc_1_cons)
        print(acc_1_cons)
        acc_1_list = []
        acc_2_list = []
        acc_3_list = []
        acc_4_list = []
        acc_5_list = []
        mrr_list = []
        for i in range(int(len_cons / 10)):
            x1 = QPointF(int(acc_1_cons[i * 10][0]),
                         round(100 * acc_1_cons[i * 10][1], 2))
            acc_1_list.append(x1)
            x2 = QPointF(int(acc_2_cons[i * 10][0]),
                         round(100 * acc_2_cons[i * 10][1], 2))
            acc_2_list.append(x2)
            x3 = QPointF(int(acc_3_cons[i * 10][0]),
                         round(100 * acc_3_cons[i * 10][1], 2))
            acc_3_list.append(x3)
            x4 = QPointF(int(acc_4_cons[i * 10][0]),
                         round(100 * acc_4_cons[i * 10][1], 2))
            acc_4_list.append(x4)
            x5 = QPointF(int(acc_5_cons[i * 10][0]),
                         round(100 * acc_5_cons[i * 10][1], 2))
            acc_5_list.append(x5)
            x6 = QPointF(int(mrr_cons[i * 10][0]),
                         round(100 * mrr_cons[i * 10][1], 2))
            mrr_list.append(x6)
        self.acc_1_cons_QSplineSeries.append(acc_1_list)
        self.acc_2_cons_QSplineSeries.append(acc_2_list)
        self.acc_3_cons_QSplineSeries.append(acc_3_list)
        self.acc_4_cons_QSplineSeries.append(acc_4_list)
        self.acc_5_cons_QSplineSeries.append(acc_5_list)
        self.mrr_cons_QSplineSeries.append(mrr_list)

        self.statusBar.showMessage('测试成功')
        self.acc_cons_QchartView.chart().axisX().setRange(0, len(acc_1_cons))  # 设置默认x轴量程
        self.acc_cons_QchartView.chart().axisX().setTickCount(11)  # 设置x轴坐标轴节点个数
        self.acc_cons_QchartView.show()
        i = 0
        for key in data_tableview:
            if key == 'test_num':
                self.testNum.setText('测试集大小为' + str(data[key]))
                self.testNum.setFont(QFont('Times', 15))
            else:
                self.model.setItem(i, 0, QStandardItem(str(key)))
                print(key)
                self.model.setItem(i, 1, QStandardItem(str(data[key])))
                i += 1
        self.setStyleSheet("#right_widget{border-image:url(Background/daxing/daxing_opacity_0.7.png);}")
        self.btn_download.setEnabled(True)
        d['data_test'] = {}

    def downloadTest(self):
        d['download_finished'] = False
        # 初始状态下右上角背景图片
        self.setStyleSheet("#right_widget{border-image:url(Background/background.png);}")
        # 清洗右侧页面
        if self.findChild(QFrame, 'right_help_status3'):
            self.frame_help3.setVisible(False)
        # 清洗右侧页面
        if self.findChild(QFrame, 'right_test'):
            self.frame_test.setVisible(False)
        t1 = threading.Thread(target=thread_download, args=(self,))
        t1.start()
        i = 0
        j = 0
        while True:
            if j > 5000:
                self.statusBar.showMessage('数据处理失败，请重试')
                return
            time.sleep(0.5)
            if i % 11 == 0:
                self.statusBar.showMessage('0%')
            elif i % 11 == 1:
                self.statusBar.showMessage('███10%')
            elif i % 11 == 2:
                self.statusBar.showMessage('█████20%')
            elif i % 11 == 3:
                self.statusBar.showMessage('███████30%')
            elif i % 11 == 4:
                self.statusBar.showMessage('█████████40%')
            elif i % 11 == 5:
                self.statusBar.showMessage('███████████50%')
            elif i % 11 == 6:
                self.statusBar.showMessage('█████████████60%')
            elif i % 11 == 7:
                self.statusBar.showMessage('███████████████70%')
            elif i % 11 == 8:
                self.statusBar.showMessage('█████████████████80%')
            elif i % 11 == 9:
                self.statusBar.showMessage('███████████████████90%')
            elif i % 11 == 10 and d['download_finished'] != 0:
                self.statusBar.showMessage('█████████████████████100%')
                time.sleep(0.5)
                break
            if i != 10:
                i += 1
            j += 1
            gui()

    def closeEvent(self, event):

        # 清理一些 自己需要关闭的东西
        event.accept()  # 界面的关闭   但是会有一些时候退出不完全    需要调用 os 的_exit 完全退出
        try:
            os._exit(5)
        except Exception as e:
            print(e)


def thread_download(self):
    url = ServerAddress + '/downloadTest'
    res = requests.get(url=url)
    data = res.json()
    writeDataToExcleFile(data, 'data_test.xlsx')

    os.startfile('data_test.xlsx')
    self.statusBar.showMessage('下载结果成功')
    d['download_finished'] = True


# 选择模型子窗口
class SelectModel(QWidget):
    def __init__(self, data, parent=None):

        super(SelectModel, self).__init__(parent)
        method_name = data['method_name']
        dataset_name = data['dataset_name']
        print(method_name)
        print(dataset_name)
        self.num = len(dataset_name)
        # 确认/取消按钮
        self.okButton = QPushButton("确定")
        self.okButton.setMinimumSize(60, 20)

        self.okButton.setIcon(qtawesome.icon('fa.check', color='red'))
        self.cancelButton = QPushButton("取消")
        self.cancelButton.setMinimumSize(60, 20)
        self.cancelButton.setIcon(qtawesome.icon('fa.close', color='green'))
        self.okButton.clicked.connect(self.confirm)
        self.cancelButton.clicked.connect(self.close)
        self.okButton.setFont(QFont("SimHei", 11))
        self.cancelButton.setFont(QFont("SimHei", 11))
        # 布局
        # 创建窗口主部件
        self.setObjectName('selectModelWidget')
        self.main_layout = QVBoxLayout()
        self.setLayout(self.main_layout)

        # 创建复选框布局
        self.vbox = QVBoxLayout()
        self.groupBox = QGroupBox("选择数据集及模型", self)
        self.groupBox.setFlat(False)
        self.groupBox.setFont(QFont("SimHei", 11))

        # 创建表单
        for i in range(len(dataset_name)):
            globals()['r_btn' + str(i)] = QRadioButton("".join([dataset_name[i], '|', method_name[i]]), self)
            self.vbox.addWidget(globals()['r_btn' + str(i)])
        self.groupBox.setLayout(self.vbox)
        self.r_btn0.setChecked(True)
        self.main_layout.addWidget(self.groupBox)
        # 添加按钮
        self.hbox = QHBoxLayout()
        self.hbox.addStretch(1)
        self.hbox.addWidget(self.okButton)
        self.hbox.addWidget(self.cancelButton)
        self.main_layout.addLayout(self.hbox)

        # self.setAttribute(QtCore.Qt.WA_TranslucentBackground)  # 设置窗口背景透明
        self.setWindowFlag(QtCore.Qt.FramelessWindowHint)  # 隐藏边框

        self.setStyleSheet('''
            QPushButton{border:none;text-align: left; }
            QPushButton:hover{border-left:3px solid black;font-weight:450;}
            #selectModelWidget{
                border-radius:3px;
                border-top:1px solid white;
                border-bottom:1px solid white;
                border-left:1px solid white;
                border-right:1px solid white;
            }
            QGroupBox{
                border:1px solid black;
                border-radius: 5px;
                margin-top: 2ex;
                margin-right:2ex;
            }
            QGroupBox::title{
                subcontrol-origin:margin;
                padding:0 2px;
                subcontrol-position: top left;
                left:22px;
                margin-left: 0px;
            }

        ''')

        # QGroupBox
        # {
        #     color: white;
        # }
        # QRadioButton
        # {
        #     color: white;
        # }
        # QGroupBox::indicator: checked
        # {
        #     image: url(Icon / WaitChoose / choose_white.png);
        # }
        # QCheckBox::indicator: unchecked
        # {
        #     image: url(: / image / images / checkbox_unchecked.png);
        # }
        # QCheckBox::indicator: unchecked:pressed
        # {
        #     image: url(: / image / images / checkbox_checked.png);
        # }
        self.setGeometry(600, 600, self.layout().sizeHint().width() + 20, self.layout().sizeHint().height() + 20)

        bitmap = QBitmap(self.size())
        bitmap.fill()
        painter = QPainter(bitmap)
        painter.begin(self)
        painter.setPen(Qt.NoPen)
        painter.setBrush(Qt.black)
        painter.setRenderHint(QPainter.Antialiasing)
        painter.drawRoundedRect(bitmap.rect(), 16, 16)
        painter.end()
        self.setMask(bitmap)

    def confirm(self):
        url = ServerAddress + '/chooseModelDirectory'
        data = {}
        for i in range(self.num):
            if globals()['r_btn' + str(i)].isChecked():
                data['choosedDirectory'] = globals()['r_btn' + str(i)].text()
                print(data)
        headers = {'Content-Type': 'application/json'}
        res = requests.post(url=url, data=json.dumps(data), headers=headers)
        if res.text == '选择成功':
            user_inf.statusBar.showMessage('选择成功')
            self.close()
        else:
            user_inf.statusBar.showMessage('选择失败，请重试')


Lable = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P']


def writeDataToExcleFile(inputData, outPutFile):
    wb = Workbook()
    sheet = wb.active
    sheet.title = "Sheet1"
    item_0 = inputData[0]
    i = 0
    for key in item_0.keys():
        sheet[Lable[i] + str(1)].value = key
        i = i + 1
    j = 1
    for item in inputData:
        k = 0
        for key in item:
            sheet[Lable[k] + str(j + 1)].value = str(item[key])
            k = k + 1
        j = j + 1
    wb.save(outPutFile)
    print('数据写入完毕!')


# 选择数据子窗口
class SelectData(QWidget):
    def __init__(self, data, parent=None):
        super(SelectData, self).__init__(parent)
        #

        self.num = len(data)
        # 确认/取消按钮
        self.okButton = QPushButton("确定")
        self.okButton.setMinimumSize(60, 20)
        self.okButton.setIcon(qtawesome.icon('fa.check', color='red'))
        self.cancelButton = QPushButton("取消")
        self.cancelButton.setMinimumSize(60, 20)
        self.cancelButton.setIcon(qtawesome.icon('fa.close', color='green'))
        self.okButton.clicked.connect(self.confirm)
        self.cancelButton.clicked.connect(self.close)
        self.okButton.setFont(QFont("SimHei", 11))
        self.cancelButton.setFont(QFont("SimHei", 11))
        # 布局
        # 创建窗口主部件
        self.setObjectName('selectWidget')
        self.main_layout = QVBoxLayout()
        self.setLayout(self.main_layout)

        # 创建复选框布局
        self.vbox = QVBoxLayout()
        self.groupBox = QGroupBox("选择文件目录", self)
        self.groupBox.setFlat(False)
        self.groupBox.setFont(QFont("SimHei", 11))

        # 创建表单
        for i in range(len(data)):
            globals()['r_btn' + str(i)] = QRadioButton(data[i], self)
            self.vbox.addWidget(globals()['r_btn' + str(i)])
        self.groupBox.setLayout(self.vbox)
        self.r_btn0.setChecked(True)
        self.main_layout.addWidget(self.groupBox)
        # 添加按钮
        self.hbox = QHBoxLayout()
        self.hbox.addStretch(1)
        self.hbox.addWidget(self.okButton)
        self.hbox.addWidget(self.cancelButton)
        self.main_layout.addLayout(self.hbox)

        # self.setAttribute(QtCore.Qt.WA_TranslucentBackground)  # 设置窗口背景透明
        self.setWindowFlag(QtCore.Qt.FramelessWindowHint)  # 隐藏边框

        self.setStyleSheet('''
            QPushButton{border:none;text-align: left; }
            QPushButton:hover{border-left:3px solid black;font-weight:450;}
            #selectWidget{
                border-radius:3px;
                border-top:1px solid white;
                border-bottom:1px solid white;
                border-left:1px solid white;
                border-right:1px solid white;
            }
            QGroupBox{
                border:1px solid black;
                border-radius: 5px;
                margin-top: 2ex;
                margin-right:2ex;
            }
            QGroupBox::title{
                subcontrol-origin:margin;
                padding:0 2px;
                subcontrol-position: top left;
                left:22px;
                margin-left: 0px;
            }

        ''')

        # QGroupBox
        # {
        #     color: white;
        # }
        # QRadioButton
        # {
        #     color: white;
        # }
        # QGroupBox::indicator: checked
        # {
        #     image: url(Icon / WaitChoose / choose_white.png);
        # }
        # QCheckBox::indicator: unchecked
        # {
        #     image: url(: / image / images / checkbox_unchecked.png);
        # }
        # QCheckBox::indicator: unchecked:pressed
        # {
        #     image: url(: / image / images / checkbox_checked.png);
        # }
        self.setGeometry(600, 600, self.layout().sizeHint().width() + 20, self.layout().sizeHint().height() + 20)

        bitmap = QBitmap(self.size())
        bitmap.fill()
        painter = QPainter(bitmap)
        painter.begin(self)
        painter.setPen(Qt.NoPen)
        painter.setBrush(Qt.black)
        painter.setRenderHint(QPainter.Antialiasing)
        painter.drawRoundedRect(bitmap.rect(), 16, 16)
        painter.end()
        self.setMask(bitmap)

    def confirm(self):
        url = ServerAddress + '/chooseDataDirectory'
        data = {}
        for i in range(self.num):
            if globals()['r_btn' + str(i)].isChecked():
                data['choosedDirectory'] = globals()['r_btn' + str(i)].text()
                print(data)
        headers = {'Content-Type': 'application/json'}
        res = requests.post(url=url, data=json.dumps(data), headers=headers)
        if res.text == '选择成功':
            user_inf.statusBar.showMessage('选择成功')
            self.close()
        else:
            user_inf.statusBar.showMessage('选择失败，请重试')


# 数据上传子窗口
class UploadData(QWidget):
    def __init__(self, parent=None):
        super(UploadData, self).__init__(parent)

        # 确认/取消按钮
        self.okButton = QPushButton("确定")
        self.okButton.setObjectName('down_button')
        self.okButton.setMinimumSize(60, 20)
        self.okButton.setIcon(qtawesome.icon('fa.check', color='red'))
        self.cancelButton = QPushButton("取消")
        self.cancelButton.setObjectName('down_button')
        self.cancelButton.setMinimumSize(60, 20)
        self.cancelButton.setIcon(qtawesome.icon('fa.close', color='green'))
        self.okButton.clicked.connect(self.confirm)
        self.cancelButton.clicked.connect(self.close)
        self.okButton.setFont(QFont("SimHei", 11))
        self.cancelButton.setFont(QFont("SimHei", 11))
        # 布局
        # 创建窗口主部件
        self.setObjectName('updateWidget')
        self.main_layout = QVBoxLayout()
        self.setLayout(self.main_layout)

        # 创建复选框布局
        self.vbox = QVBoxLayout()
        self.groupBox = QGroupBox("上传所需文件", self)
        self.groupBox.setFlat(False)
        self.groupBox.setFont(QFont("SimHei", 11))
        self.groupBox.setLayout(self.vbox)

        # 设置数据集名称
        self.label = QtWidgets.QLabel('原始数据集名称:')
        self.label.setToolTip("名称只能包含数字、下划线或英文")
        self.lineEdit = QLineEdit()

        reg = QRegExp('^\w+$ ')
        validator = QRegExpValidator(self)
        validator.setRegExp(reg)
        self.lineEdit.setValidator(validator)

        # 添加布局1
        self.hbox_1 = QHBoxLayout()
        self.hbox_1.addWidget(self.label)
        self.hbox_1.addWidget(self.lineEdit)
        self.vbox.addLayout(self.hbox_1)

        # 添加选择文件夹按钮
        self.btn_selectFolder = QPushButton('选择文件夹', self)
        self.btn_selectFolder.setObjectName('up_button')
        self.btn_selectFolder.setIcon(QIcon('Icon/ChooseFolder/chooseFolder_black.png'))
        self.btn_selectFolder.clicked.connect(self.selectFolder)

        # 添加上传文件按钮
        self.btn_upload = QPushButton('上传文件', self)
        self.btn_upload.setObjectName('up_button')
        self.btn_upload.setIcon(QIcon('Icon/UploadData/uploadData_black.png'))
        self.btn_upload.clicked.connect(self.upload)

        # 添加布局2
        self.hbox_2 = QHBoxLayout()
        self.hbox_2.addWidget(self.btn_selectFolder)
        self.hbox_2.addStretch(1)
        self.hbox_2.addWidget(self.btn_upload)
        self.vbox.addLayout(self.hbox_2)

        self.main_layout.addWidget(self.groupBox)

        # 添加布局
        self.hbox = QHBoxLayout()
        self.hbox.addStretch(1)
        self.hbox.addWidget(self.okButton)
        self.hbox.addWidget(self.cancelButton)
        self.main_layout.addLayout(self.hbox)

        # self.setAttribute(QtCore.Qt.WA_TranslucentBackground)  # 设置窗口背景透明
        self.setWindowFlag(QtCore.Qt.FramelessWindowHint)  # 隐藏边框

        self.setStyleSheet('''
            QPushButton{border:none;text-align: left; }
            QPushButton#up_button:hover{border-left:4px solid red;font-weight:200;}
            QPushButton#down_button:hover{border-left:3px solid black;font-weight:450;}
            #updateWidget{
                
                border-radius:3px;
                border-top:1px solid white;
                border-bottom:1px solid white;
                border-left:1px solid white;
                border-right:1px solid white;
            }
            QLineEdit{
                border:1px solid gray;
                width:30px;
                border-radius:2px;
                padding:0px 0px;
            }
            QGroupBox{
                border:1px solid black;
                border-radius: 5px;
                margin-top: 2ex;
                margin-right:2ex;
            }
            QGroupBox::title{
                subcontrol-origin:margin;
                padding:0 2px;
                subcontrol-position: top left;
                left:22px;
                margin-left: 0px;
            }

        ''')

        self.setGeometry(600, 600, self.layout().sizeHint().width() + 40, self.layout().sizeHint().height() + 20)

        bitmap = QBitmap(self.size())
        bitmap.fill()
        painter = QPainter(bitmap)
        painter.begin(self)
        painter.setPen(Qt.NoPen)
        painter.setBrush(Qt.black)
        painter.setRenderHint(QPainter.Antialiasing)
        painter.drawRoundedRect(bitmap.rect(), 16, 16)
        painter.end()
        self.setMask(bitmap)

    def selectFolder(self):
        global folderPath
        dir_choose = QtWidgets.QFileDialog.getExistingDirectory(self, '请选择文件夹', os.getcwd() + '/Data')
        if dir_choose == "":
            user_inf.statusBar.showMessage('请先选择文件夹')
            return
        else:
            print(dir_choose)
            folderPath = dir_choose

    def upload(self):
        if 'folderPath' not in globals():
            user_inf.statusBar.showMessage('请先选择文件夹')
            return
        # 得到文件夹下的所有文件名称
        filesPath = os.listdir(folderPath)
        files = {}
        i = 0
        for filePath in filesPath:
            path = os.path.join(folderPath, filePath)
            files['file' + str(i)] = open(path, 'rb')
            i += 1
        url = ServerAddress + '/uploadData'
        res = requests.post(url, files=files)
        if res.text == '上传成功':
            user_inf.statusBar.showMessage('上传文件成功')
        else:
            user_inf.statusBar.showMessage('上传文件失败，请重试')

    def confirm(self):
        if not self.lineEdit.text():
            user_inf.statusBar.showMessage('请先输入数据集名称')
            return
        url = ServerAddress + '/getUploadDirectory'
        res = requests.get(url=url)
        if res.text == '待上传文件':
            user_inf.statusBar.showMessage('请先上传文件')
            return

        url = ServerAddress + '/finishDataDirectory'
        data = {}
        data['directory_name'] = self.lineEdit.text()
        headers = {'Content-Type': 'application/json'}
        res = requests.post(url=url, data=json.dumps(data), headers=headers)
        if res.text == '数据集加载成功':
            user_inf.statusBar.showMessage('数据集加载成功')
            self.close()
        else:
            user_inf.statusBar.showMessage('已存在相同数据集文件，请修改数据集名称')


# 数据相关参数设置子窗口
class SetDataConfig(QWidget):
    def __init__(self, parent=None):
        super(SetDataConfig, self).__init__(parent)

        # 确认/取消按钮
        self.okButton = QPushButton("确定")
        self.okButton.setObjectName('down_button')
        self.okButton.setMinimumSize(60, 20)
        self.okButton.setIcon(qtawesome.icon('fa.check', color='red'))
        self.cancelButton = QPushButton("取消")
        self.cancelButton.setObjectName('down_button')
        self.cancelButton.setMinimumSize(60, 20)
        self.cancelButton.setIcon(qtawesome.icon('fa.close', color='green'))
        self.okButton.clicked.connect(self.confirm)
        self.cancelButton.clicked.connect(self.close)
        self.okButton.setFont(QFont("SimHei", 11))
        self.cancelButton.setFont(QFont("SimHei", 11))
        # 布局
        # 创建窗口主部件
        self.setObjectName('setDataWidget')
        self.main_layout = QVBoxLayout()
        self.setLayout(self.main_layout)

        # 创建复选框布局
        self.vbox = QVBoxLayout()
        self.groupBox = QGroupBox("数据相关参数", self)
        self.groupBox.setFlat(False)
        self.groupBox.setFont(QFont("SimHei", 11))
        self.groupBox.setLayout(self.vbox)

        # 设置数据集名称
        self.label = QtWidgets.QLabel('目标数据集名称:')
        self.label.setToolTip("名称只能包含数字、下划线或英文")
        self.lineEdit = QLineEdit()

        reg = QRegExp('^\w+$ ')
        validator = QRegExpValidator(self)
        validator.setRegExp(reg)
        self.lineEdit.setValidator(validator)

        # 设置训练集占比
        self.label1 = QtWidgets.QLabel('测试集占比:')
        self.label1.setToolTip("请输入0.0-1.0之间的1位小数")
        self.lineEdit1 = QLineEdit()
        self.lineEdit1.setText("0.2")

        doubleValidator = QDoubleValidator()
        doubleValidator.setRange(0, 1)
        doubleValidator.setNotation(QDoubleValidator.StandardNotation)
        doubleValidator.setDecimals(1)
        self.lineEdit1.setValidator(doubleValidator)

        # # 设置处理后序列长度
        # self.label2 = QLabel("处理后的序列长度:")
        # self.label2.setToolTip("请输入整数")
        # self.lineEdit2 = QLineEdit()
        # self.lineEdit2.setText("21")

        # intValidator = QIntValidator()
        # intValidator.setRange(1, 100)
        # self.lineEdit2.setValidator(intValidator)

        self.qform = QFormLayout()
        self.qform.addRow(self.label, self.lineEdit)
        self.qform.addRow(self.label1, self.lineEdit1)
        # self.qform.addRow(self.label2, self.lineEdit2)
        self.vbox.addStretch(1)
        self.vbox.addLayout(self.qform)
        self.vbox.addStretch(1)
        self.main_layout.addWidget(self.groupBox)

        # 添加布局
        self.hbox = QHBoxLayout()
        self.hbox.addStretch(1)
        self.hbox.addWidget(self.okButton)
        self.hbox.addWidget(self.cancelButton)
        self.main_layout.addLayout(self.hbox)

        # self.setAttribute(QtCore.Qt.WA_TranslucentBackground)  # 设置窗口背景透明
        self.setWindowFlag(QtCore.Qt.FramelessWindowHint)  # 隐藏边框

        self.setStyleSheet('''
            QPushButton{border:none;text-align: left; }
            QPushButton#up_button:hover{border-left:4px solid red;font-weight:200;}
            QPushButton#down_button:hover{border-left:3px solid black;font-weight:450;}
            #setDataWidget{

                border-radius:3px;
                border-top:1px solid white;
                border-bottom:1px solid white;
                border-left:1px solid white;
                border-right:1px solid white;
            }
            QLineEdit{
                border:1px solid gray;
                width:50px;
                border-radius:2px;
                padding:0px 0px;
            }
            QGroupBox{
                border:1px solid black;
                border-radius: 5px;
                margin-top: 2ex;
                margin-right:2ex;
            }
            QGroupBox::title{
                subcontrol-origin:margin;
                padding:0 2px;
                subcontrol-position: top left;
                left:22px;
                margin-left: 0px;
            }

        ''')

        self.setGeometry(600, 600, self.layout().sizeHint().width() + 40, self.layout().sizeHint().height() + 20)

        bitmap = QBitmap(self.size())
        bitmap.fill()
        painter = QPainter(bitmap)
        painter.begin(self)
        painter.setPen(Qt.NoPen)
        painter.setBrush(Qt.black)
        painter.setRenderHint(QPainter.Antialiasing)
        painter.drawRoundedRect(bitmap.rect(), 16, 16)
        painter.end()
        self.setMask(bitmap)

    def confirm(self):
        url = ServerAddress + "/setConfig"
        data = {}
        data['data_version'] = self.lineEdit.text()
        data['test_dataset'] = float(self.lineEdit1.text())
        headers = {'Content-Type': 'application/json'}
        res = requests.post(url=url, data=json.dumps(data), headers=headers)
        if res.text == '请先选择数据':
            user_inf.statusBar.showMessage('请先选择数据')
            return
        if res.text == '保存成功':
            user_inf.statusBar.showMessage('数据相关参数设置保存成功')
        else:
            user_inf.statusBar.showMessage('数据相关参数设置保存失败，请重试')
        self.close()


# 模型相关参数设置子窗口
class SetModelConfig(QWidget):
    def __init__(self, parent=None):
        super(SetModelConfig, self).__init__(parent)

        # 确认/取消按钮
        self.okButton = QPushButton("确定")
        self.okButton.setObjectName('down_button')
        self.okButton.setMinimumSize(60, 20)
        self.okButton.setIcon(qtawesome.icon('fa.check', color='red'))
        self.cancelButton = QPushButton("取消")
        self.cancelButton.setObjectName('down_button')
        self.cancelButton.setMinimumSize(60, 20)
        self.cancelButton.setIcon(qtawesome.icon('fa.close', color='green'))
        self.okButton.clicked.connect(self.confirm)
        self.cancelButton.clicked.connect(self.close)
        self.okButton.setFont(QFont("SimHei", 11))
        self.cancelButton.setFont(QFont("SimHei", 11))
        # 布局
        # 创建窗口主部件
        self.setObjectName('setModelWidget')
        self.main_layout = QVBoxLayout()
        self.setLayout(self.main_layout)

        # 创建复选框布局
        self.vbox = QVBoxLayout()
        self.groupBox = QGroupBox("模型相关参数", self)
        self.groupBox.setFlat(False)
        self.groupBox.setFont(QFont("SimHei", 11))
        self.groupBox.setLayout(self.vbox)

        # 设置算法名称
        self.label1 = QtWidgets.QLabel('算法模型名称:')
        self.label1.setToolTip("名称只能包含数字、下划线或英文")
        self.lineEdit1 = QLineEdit()
        reg = QRegExp('^\w+$ ')
        validator = QRegExpValidator(self)
        validator.setRegExp(reg)
        self.lineEdit1.setValidator(validator)

        # 设置学习率
        self.label2 = QLabel("学习率:")
        self.label2.setToolTip("请输入0-1之间八位以内浮点数")
        self.lineEdit2 = QLineEdit()
        self.lineEdit2.setText(str(1e-3))
        doubleValidator = QDoubleValidator()
        doubleValidator.setRange(0, 1)
        doubleValidator.setNotation(QDoubleValidator.StandardNotation)
        doubleValidator.setDecimals(8)
        self.lineEdit2.setValidator(doubleValidator)

        # 设置eps
        self.label3 = QLabel("eps:")
        self.label3.setToolTip("请输入0-1之间八位以内浮点数")
        self.lineEdit3 = QLineEdit()
        self.lineEdit3.setText(str(1e-5))
        self.lineEdit3.setValidator(doubleValidator)

        # 设置weight_decay
        self.label4 = QLabel("weight_decay:")
        self.label4.setToolTip("请输入0-1之间八位以内浮点数")
        self.lineEdit4 = QLineEdit()
        self.lineEdit4.setText(str(1e-6))
        self.lineEdit4.setValidator(doubleValidator)

        # 设置总迭代次数
        self.label5 = QLabel("总迭代次数:")
        self.label5.setToolTip("请输入1-100,000之间的整数")
        intValidator_2 = QIntValidator()
        intValidator_2.setRange(0, int(1e5))
        self.lineEdit5 = QLineEdit()
        self.lineEdit5.setText(str(int(1e5)))
        self.lineEdit5.setValidator(intValidator_2)

        # 设置评估间隔
        self.label6 = QLabel("评估间隔:")
        self.label6.setToolTip("请输入1-100之间的整数")
        self.lineEdit6 = QLineEdit()
        self.lineEdit6.setText('10')
        intValidator = QIntValidator()
        intValidator.setRange(1, 100)
        self.lineEdit6.setValidator(intValidator)

        # 设置从第几轮迭代开始评估
        self.label7 = QLabel("从第几轮迭代开始评估:")
        self.label7.setToolTip("请输入小于总迭代次数的整数")
        self.lineEdit7 = QLineEdit()
        self.lineEdit7.setText('0')
        self.lineEdit7.setValidator(intValidator_2)

        # 设置隐藏层大小
        self.label8 = QLabel("lstm隐藏状态大小:")
        self.label8.setToolTip("请输入是2的N次方且2<N<13的整数")
        self.lineEdit8 = QLineEdit()
        self.lineEdit8.setText('128')
        # self.lineEdit8.setValidator(intValidator_2)

        # 设置训练训练batchsize
        self.label9 = QLabel("训练batchsize:")
        self.label9.setToolTip("请输入是2的N次方且2<N<13的整数")
        self.lineEdit9 = QLineEdit()
        self.lineEdit9.setText('64')
        self.lineEdit9.setValidator(intValidator_2)

        # 设置序列长度
        self.label10 = QLabel("序列长度:")
        self.label10.setToolTip("请输入小于处理后的序列长度的整数")
        self.lineEdit10 = QLineEdit()
        self.lineEdit10.setText('10')
        self.lineEdit10.setValidator(intValidator)
        ...

        # 设置块类型
        self.label11 = QLabel("块类型:")
        self.label11.setToolTip("请输入0-2之间的整数")
        self.hbox_1 = QHBoxLayout(self)

        # 设置theta维度
        self.label12 = QLabel("theta维度:")
        self.label12.setToolTip("请输入1-10之间的整数")
        self.hbox_2 = QHBoxLayout(self)

        # 设置栈的个数
        self.label17 = QLabel("栈的个数:")
        self.label17.setToolTip("请输入2-5之间的整数")
        self.lineEdit17 = QLineEdit()
        self.lineEdit17.textChanged.connect(lambda: self.setNums(self.lineEdit17.text()))
        self.lineEdit17.setText('3')
        intValidator_3 = QIntValidator()
        intValidator_3.setRange(2, 5)
        self.lineEdit17.setValidator(intValidator_3)

        # 设置块的个数
        self.label13 = QLabel("块的个数:")
        self.label13.setToolTip("请输入1-10之间的整数")
        self.lineEdit13 = QLineEdit()
        self.lineEdit13.setText('3')
        intValidator_4 = QIntValidator()
        intValidator_4.setRange(1, 10)
        self.lineEdit13.setValidator(intValidator_4)

        # 设置n_beats隐藏层大小
        self.label14 = QLabel("n_beats隐藏层大小:")
        self.label14.setToolTip("请输入是2的N次方且2<N<13的整数")
        self.lineEdit14 = QLineEdit()
        self.lineEdit14.setText('128')
        self.lineEdit14.setValidator(intValidator_2)

        # 设置图卷积特征数
        self.label15 = QLabel("图卷积特征数:")
        self.label15.setToolTip("请输入是2的N次方且2<N<13的整数")
        self.lineEdit15 = QLineEdit()
        self.lineEdit15.setText('16')
        self.lineEdit15.setValidator(intValidator_2)

        # 设置图卷积层数
        self.label16 = QLabel("图卷积层数:")
        self.label16.setToolTip("请输入1-5之间的整数")
        self.lineEdit16 = QLineEdit()
        self.lineEdit16.setText('1')
        intValidator_5 = QIntValidator()
        intValidator_5.setRange(1, 5)
        self.lineEdit16.setValidator(intValidator_5)

        self.qform = QFormLayout()
        self.qform.addRow(self.label1, self.lineEdit1)
        self.qform.addRow(self.label2, self.lineEdit2)
        self.qform.addRow(self.label3, self.lineEdit3)
        self.qform.addRow(self.label4, self.lineEdit4)
        self.qform.addRow(self.label5, self.lineEdit5)
        self.qform.addRow(self.label6, self.lineEdit6)
        self.qform.addRow(self.label7, self.lineEdit7)
        self.qform.addRow(self.label8, self.lineEdit8)
        self.qform.addRow(self.label9, self.lineEdit9)
        self.qform.addRow(self.label10, self.lineEdit10)
        self.qform.addRow(self.label17, self.lineEdit17)
        self.qform.addRow(self.label11, self.hbox_1)
        self.qform.addRow(self.label12, self.hbox_2)
        self.qform.addRow(self.label13, self.lineEdit13)
        self.qform.addRow(self.label14, self.lineEdit14)
        self.qform.addRow(self.label15, self.lineEdit15)
        self.qform.addRow(self.label16, self.lineEdit16)
        self.qform.setRowWrapPolicy(QFormLayout.WrapLongRows)
        self.vbox.addStretch(1)
        self.vbox.addLayout(self.qform)
        self.vbox.addStretch(1)
        self.main_layout.addWidget(self.groupBox)
        # 添加布局
        self.hbox = QHBoxLayout()
        self.hbox.addStretch(1)
        self.hbox.addWidget(self.okButton)
        self.hbox.addWidget(self.cancelButton)
        self.main_layout.addLayout(self.hbox)

        # self.setAttribute(QtCore.Qt.WA_TranslucentBackground)  # 设置窗口背景透明
        self.setWindowFlag(QtCore.Qt.FramelessWindowHint)  # 隐藏边框

        self.setStyleSheet('''
            QPushButton{border:none;text-align: left; }
            QPushButton#up_button:hover{border-left:4px solid red;font-weight:200;}
            QPushButton#down_button:hover{border-left:3px solid black;font-weight:450;}
            #setModelWidget{

                border-radius:3px;
                border-top:1px solid white;
                border-bottom:1px solid white;
                border-left:1px solid white;
                border-right:1px solid white;
            }
            QLineEdit{
                border:1px solid gray;
                width:50px;
                border-radius:2px;
                padding:0px 0px;
            }
            QGroupBox{
                border:1px solid black;
                border-radius: 5px;
                margin-top: 2ex;
                margin-right:2ex;
            }
            QGroupBox::title{
                subcontrol-origin:margin;
                padding:0 2px;
                subcontrol-position: top left;
                left:22px;
                margin-left: 0px;
            }

        ''')

        self.setGeometry(600, 600, self.layout().sizeHint().width() + 40, self.layout().sizeHint().height() + 20)

        bitmap = QBitmap(self.size())
        bitmap.fill()
        painter = QPainter(bitmap)
        painter.begin(self)
        painter.setPen(Qt.NoPen)
        painter.setBrush(Qt.black)
        painter.setRenderHint(QPainter.Antialiasing)
        painter.drawRoundedRect(bitmap.rect(), 16, 16)
        painter.end()
        self.setMask(bitmap)

    # 设置多少栏参数
    def setNums(self, nums):
        # 块类型
        if nums == '':
            return
        if nums == '3':
            while (self.findChild(QLineEdit, 'edit')):
                self.qform.removeWidget(self.findChild(QLineEdit, 'edit'))
                sip.delete(self.findChild(QLineEdit, 'edit'))
            self.block1 = QLineEdit()
            self.block1.setObjectName('edit')
            self.block1.setFont(QFont("SimHei", 11))
            self.block1.setText('0')
            self.block2 = QLineEdit()
            self.block2.setObjectName('edit')
            self.block2.setText('1')
            self.block2.setFont(QFont("SimHei", 11))
            self.block3 = QLineEdit()
            self.block3.setObjectName('edit')
            self.block3.setText('2')
            self.block3.setFont(QFont("SimHei", 11))
            intValidator_1 = QIntValidator()
            intValidator_1.setRange(0, 2)
            self.block1.setValidator(intValidator_1)
            self.block2.setValidator(intValidator_1)
            self.block3.setValidator(intValidator_1)
            self.hbox_1.addWidget(self.block1)
            self.hbox_1.addWidget(self.block2)
            self.hbox_1.addWidget(self.block3)

            # theta维度
            self.theta1 = QLineEdit()
            self.theta1.setObjectName('edit')
            self.theta1.setText('2')
            self.theta1.setFont(QFont("SimHei", 11))
            self.theta2 = QLineEdit()
            self.theta2.setObjectName('edit')
            self.theta2.setText('8')
            self.theta2.setFont(QFont("SimHei", 11))
            self.theta3 = QLineEdit()
            self.theta3.setObjectName('edit')
            self.theta3.setText('3')
            self.theta3.setFont(QFont("SimHei", 11))
            intValidator_2 = QIntValidator()
            intValidator_2.setRange(1, 10)
            self.theta1.setValidator(intValidator_2)
            self.theta2.setValidator(intValidator_2)
            self.theta3.setValidator(intValidator_2)
            self.hbox_2.addWidget(self.theta1)
            self.hbox_2.addWidget(self.theta2)
            self.hbox_2.addWidget(self.theta3)
        else:
            num = int(nums)
            intValidator_1 = QIntValidator()
            intValidator_1.setRange(0, 2)
            intValidator_2 = QIntValidator()
            intValidator_2.setRange(1, 10)
            names = self.__dict__

            while (self.findChild(QLineEdit, 'edit')):
                self.qform.removeWidget(self.findChild(QLineEdit, 'edit'))
                sip.delete(self.findChild(QLineEdit, 'edit'))

            for i in range(num):
                names['block' + str(i)] = QLineEdit()
                names['block' + str(i)].setObjectName('edit')
                names['block' + str(i)].setFont(QFont("SimHei", 11))
                names['block' + str(i)].setValidator(intValidator_1)
                names['theta' + str(i)] = QLineEdit()
                names['theta' + str(i)].setObjectName('edit')
                names['theta' + str(i)].setFont(QFont("SimHei", 11))
                names['theta' + str(i)].setValidator(intValidator_2)
                self.hbox_1.addWidget(names['block' + str(i)])
                self.hbox_2.addWidget(names['theta' + str(i)])

    def confirm(self):
        if not self.lineEdit1.text():
            user_inf.statusBar.showMessage('请先输入算法模型名称')
            return
        for x in self.findChildren(QLineEdit, 'edit'):
            if x.text() == '':
                user_inf.statusBar.showMessage('请输入所有参数')
                return
        url = ServerAddress + "/setModelConfig"
        data = {}
        data['method_name'] = self.lineEdit1.text()
        data['learning_rate'] = float(self.lineEdit2.text())
        data['eps'] = float(self.lineEdit3.text())
        data['weight_decay'] = float(self.lineEdit4.text())
        data['total_iter_num'] = int(self.lineEdit5.text())
        d['train_steps'] = int(self.lineEdit5.text())
        data['val_iter_num'] = int(self.lineEdit6.text())
        data['val_iter_begin'] = int(self.lineEdit7.text())
        data['cell_size'] = float(self.lineEdit8.text())
        data['train_batch_size'] = int(self.lineEdit9.text())
        data['seq_len'] = int(self.lineEdit10.text())
        block_types = []
        for i in range(len(self.findChildren(QLineEdit, 'edit'))):
            if i == len(self.findChildren(QLineEdit, 'edit')) / 2:
                break
            block_types.append(int(self.findChildren(QLineEdit, 'edit')[i].text()))
        data['block_types'] = block_types
        thetas_dims = []
        for i in range(len(self.findChildren(QLineEdit, 'edit'))):
            if i < len(self.findChildren(QLineEdit, 'edit')) / 2:
                continue
            thetas_dims.append(int(self.findChildren(QLineEdit, 'edit')[i].text()))
        thetas_dims = tuple(thetas_dims)
        data['thetas_dims'] = thetas_dims
        data['blocks_per_stack'] = int(self.lineEdit13.text())
        data['nb_hidden_units'] = int(self.lineEdit14.text())
        data['gcn_emb_size'] = int(self.lineEdit15.text())
        data['gcn_num'] = int(self.lineEdit16.text())
        print(data)
        headers = {'Content-Type': 'application/json'}
        res = requests.post(url=url, data=json.dumps(data), headers=headers)

        if res.text == '保存成功':
            user_inf.statusBar.showMessage('模型相关参数设置保存成功')
        else:
            user_inf.statusBar.showMessage('模型相关参数设置保存失败，请重试')
        self.close()


# 窗口居中
def center(self):
    # 获得窗口
    qr = self.frameGeometry()
    # 获得屏幕中心点
    cp = QDesktopWidget().availableGeometry().center()
    # 显示到屏幕中心
    qr.moveCenter(cp)
    self.move(qr.topLeft())


def signal_dataprocess(self):
    url = ServerAddress + "/getData"
    res = requests.get(url=url)
    data = res.json()
    d['data'] = data


def getTrainData(self):
    d['real_start_signal'] = False
    i = 0
    time.sleep(5)
    while True:
        if stop_thread:
            break
        time.sleep(1)
        url = ServerAddress + '/getTrainData'
        res = requests.get(url=url)
        # print(res.text)
        if (res.text == '出错了'):
            continue
        data = res.json()
        data = data['字典']
        acc_1 = data[0]
        acc_2 = data[1]
        acc_3 = data[2]
        acc_4 = data[3]
        acc_5 = data[4]
        mrr = data[5]
        loss = data[6]
        self.accQchartView.chart().setTitle(
            'ACC@1最大值为' + str(round(max(acc_1, key=lambda item: item[1])[1] * 100, 2)) + '%')
        # self.mrr_max.setText('MRR最大值'+str(round(max(mrr,key=lambda item:item[1])[1]*100,2))+'%')
        self.paintChart(acc_1, acc_2, acc_3, acc_4, acc_5, mrr, loss)
        if len(mrr) == d['train_steps']:
            self.statusBar.showMessage('训练结束')
            break
        if d['real_start_signal']:
            if i % 4 == 0:
                self.statusBar.showMessage('训练中')
            elif i % 4 == 1:
                self.statusBar.showMessage('训练中·')
            elif i % 4 == 2:
                self.statusBar.showMessage('训练中··')
            elif i % 4 == 3:
                self.statusBar.showMessage('训练中···')
            i += 1


def signal_test(self):
    url = ServerAddress + "/test"
    res = requests.get(url=url)
    data = res.json()
    d['data_test'] = data


# 将dict写入excel
def dict_to_excel(dict_content, excel_title, out_excel_file):
    """
    将字典写入excel中
    :type dict_content: object dict
    excel_title 列标题
    """
    dict_ing = dict_content
    excel_init_file = xlsxwriter.Workbook(out_excel_file)
    table = excel_init_file.add_worksheet()
    title_bold = excel_init_file.add_format({'bold': True, 'border': 1})
    border = excel_init_file.add_format({'border': 1})
    for i, j in enumerate(excel_title):
        table.set_column(i, i, len(j) + 1)
        table.write_string(i, 0, j, title_bold)
    t = 0
    for k, v in dict_content.items():
        if isinstance(v, int):
            table.write(t, 1, v, border)
        else:
            for i in range(len(v)):
                j = v[i]
                table.write(t, i + 1, j, border)
        t += 1
    # table.set_column(1,1,16)
    table.set_column("A:A", 16)
    excel_init_file.close()


if __name__ == '__main__':
    # 每一pyqt5应用程序必须创建一个应用程序对象。sys.argv参数是一个列表，从命令行输入参数。
    app = QApplication(sys.argv)
    user_inf = WTP()
    mgr = multiprocessing.Manager()
    d = mgr.dict()
    d['data'] = {}
    d['data_test'] = {}
    d['last_readnum'] = 0
    d['train_steps'] = 0
    d['download_finished'] = False
    d['real_start_signal'] = False
    d['last_readnum_test'] = 0
    gui = app.processEvents
    # 系统exit()方法确保应用程序干净的退出
    # 的exec_()方法有下划线。因为执行是一个Python关键词。因此，exec_()代替
    sys.exit(app.exec_())
